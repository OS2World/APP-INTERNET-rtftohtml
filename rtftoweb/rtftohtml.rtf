{\rtf1\ansi \deff0\deflang1024{\fonttbl{\f0\froman Times New Roman;}{\f1\froman Symbol;}{\f2\fswiss Arial;}{\f3\fswiss Chicago;}{\f4\froman New York;}{\f5\fswiss Geneva;}{\f6\fmodern Monaco;}{\f7\fscript Venice;}
{\f8\fdecor London;}{\f9\fdecor San Francisco;}{\f10\fnil Cairo;}{\f11\froman Palatino;}{\f12\froman Times;}{\f13\fswiss Helvetica;}{\f14\fmodern Courier;}{\f15\fnil New Century Schlbk;}{\f16\fnil BobGothic;}{\f17\fnil Handwriting;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue127;\red0\green127\blue127;\red0\green127\blue0;
\red127\green0\blue127;\red127\green0\blue0;\red127\green127\blue0;\red127\green127\blue127;\red192\green192\blue192;}{\stylesheet{\s242\li360\brdrt\brdrs\brdrw15 \tx2700\tqc\tx4320\tqr\tx9720 \b\f12\lang1024 \sbasedon0\snext242 footer;}{\s244\li360 
\f12\fs18\up6\lang1024 \sbasedon0\snext0 footnote reference;}{\s245\li360 \f12\fs20\lang1024 \sbasedon0\snext245 footnote text;}{\s249\li360\sb120\sa120\keepn \b\f12\fs28\lang1024 \sbasedon250\snext0 heading 6;}{\s250\li360\sb120\sa120\keepn 
\b\f12\fs28\lang1024 \sbasedon251\snext0 heading 5;}{\s251\li360\sb120\sa120\keepn \b\f12\fs28\lang1024 \sbasedon252\snext0 heading 4;}{\s252\li360\sb120\sa120\keepn \b\f12\fs28\lang1024 \sbasedon253\snext0 heading 3;}{\s253\li360\sb120\sa120\keepn\brdrb
\brdrs\brdrw15 \b\f12\fs28\lang1024 \sbasedon254\snext0 heading 2;}{\s254\li360\sb240\sa240\keepn\brdrb\brdrs\brdrw15 \b\f12\fs36\lang1024 \sbasedon0\snext0 heading 1;}{\s255\li708 \f12\lang1024 \sbasedon0\snext255 Normal Indent;}{\li360 \f12\lang1024 
\snext0 Normal;}{\s2\fi-720\li1080\tx1440 \f12\lang1024 \sbasedon0\snext2 ol;}{\s3\li360 \i\f12\lang1024 \sbasedon0\snext3 address;}{\s4\fi-720\li1440\tx1440 \f12\lang1024 \sbasedon2\snext4 ol 1;}{\s5\fi-720\li1800\tx1800 \f12\lang1024 
\sbasedon4\snext5 ol 2;}{\s6\li1440\ri1440 \i\f12\lang1024 \sbasedon0\snext6 blockquote;}{\s7\fi-900\li2340\tx2340 \f12\lang1024 \sbasedon5\snext7 ol 3;}{\s8\fi360\tx360\tx3600\tx4320\tx7200\tx10700 \f12\lang1024 \sbasedon9\snext8 dir;}{
\s9\fi-3960\li4320\tx4320 \f12\lang1024 \sbasedon2\snext9 glossary;}{\s10\fi-1080\li2880\tx2880 \f12\lang1024 \sbasedon7\snext10 ol 4;}{\s11\fi-1260\li3420\tx3420 \f12\lang1024 \sbasedon10\snext11 ol 5;}{\s12\fi-720\li1080\tx1440 \f12\lang1024 
\sbasedon2\snext12 menu;}{\s13\fi-3960\li4680\tx4680 \f12\lang1024 \sbasedon9\snext13 glossary 1;}{\s14\fi-3960\li5040\tx5040 \f12\lang1024 \sbasedon13\snext14 glossary 2;}{
\s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 \sbasedon0\snext15 pre;}{\s16\fi-3960\li5400\tx5400 \f12\lang1024 \sbasedon14\snext16 glossary 3;}{\s17\fi-3960\li5760\tx5760 \f12\lang1024 
\sbasedon16\snext17 glossary 4;}{\s18\fi-3960\li6120\tx6120 \f12\lang1024 \sbasedon17\snext18 glossary 5;}{\s19\fi-720\li1080\tx1440 \f12\lang1024 \sbasedon2\snext19 numbered list;}{\s20\fi-720\li1440\tx1440 \f12\lang1024 
\sbasedon4\snext20 numbered list 1;}{\s21\fi-720\li1800\tx1800 \f12\lang1024 \sbasedon5\snext21 numbered list 2;}{\s22\fi-900\li2340\tx2340 \f12\lang1024 \sbasedon7\snext22 numbered list 3;}{\s23\fi-1080\li2880\tx2880 \f12\lang1024 
\sbasedon10\snext23 numbered list 4;}{\s24\fi-1260\li3420\tx3420 \f12\lang1024 \sbasedon11\snext24 numbered list 5;}{\s25\fi-180\li540\tx540 \f12\lang1024 \sbasedon19\snext25 bullet list;}{\s26\fi-180\li900\tx900 \f12\lang1024 
\sbasedon20\snext26 bullet list 1;}{\s27\fi-180\li1260\tx1260 \f12\lang1024 \sbasedon21\snext27 bullet list 2;}{\s28\fi-180\li1620\tx1620 \f12\lang1024 \sbasedon22\snext28 bullet list 3;}{\s29\fi-180\li1980\tx1980 \f12\lang1024 
\sbasedon23\snext29 bullet list 4;}{\s30\fi-180\li2340\tx2340 \f12\lang1024 \sbasedon24\snext30 bullet list 5;}{\s31\fi360\li360\tx720\tx3960\tx4320\tx7560\tx10700 \f12\lang1024 \sbasedon8\snext31 dir 1;}{\s32\fi360\li720\tx1080\tx4320\tx7920\tx10700 
\f12\lang1024 \sbasedon31\snext32 dir 2;}{\s33\fi360\li1080\tx1440\tx4680\tx8280\tx10700 \f12\lang1024 \sbasedon32\snext33 dir 3;}{\s34\fi360\li1440\tx1800\tx5040\tx8640\tx10700 \f12\lang1024 \sbasedon33\snext34 dir 4;}{
\s35\fi360\li1800\tx2160\tx5400\tx10700 \f12\lang1024 \sbasedon34\snext35 dir 5;}{\s36\fi-720\li1440\tx1440 \f12\lang1024 \sbasedon4\snext36 menu 1;}{\s37\fi-720\li1800\tx1800 \f12\lang1024 \sbasedon5\snext37 menu 2;}{\s38\fi-900\li2340\tx2340 
\f12\lang1024 \sbasedon7\snext38 menu 3;}{\s39\fi-1080\li2880\tx2880 \f12\lang1024 \sbasedon10\snext39 menu 4;}{\s40\fi-1260\li3420\tx3420 \f12\lang1024 \sbasedon11\snext40 menu 5;}{\s41\fi-720\li1080\tx1440 \f12\lang1024 \sbasedon19\snext41 small gloss;}
{\s42\fi-720\li1440\tx1440 \f12\lang1024 \sbasedon20\snext42 small gloss 1;}{\s43\fi-720\li1800\tx1800 \f12\lang1024 \sbasedon21\snext43 small gloss 2;}{\s44\fi-900\li2340\tx2340 \f12\lang1024 \sbasedon22\snext44 small gloss 3;}{
\s45\fi-1080\li2880\tx2880 \f12\lang1024 \sbasedon23\snext45 small gloss 4;}{\s46\fi-1260\li3420\tx3420 \f12\lang1024 \sbasedon24\snext46 small gloss 5;}{\s47\fi-180\li540\tx540 \f12\lang1024 \sbasedon25\snext47 ul;}{\s48\fi-180\li900\tx900 \f12\lang1024 
\sbasedon26\snext48 ul 1;}{\s49\fi-180\li1260\tx1260 \f12\lang1024 \sbasedon27\snext49 ul 2;}{\s50\fi-180\li1620\tx1620 \f12\lang1024 \sbasedon28\snext50 ul 3;}{\s51\fi-180\li1980\tx1980 \f12\lang1024 \sbasedon29\snext51 ul 4;}{\s52\fi-1260\li3420\tx3420 
\f12\lang1024 \sbasedon0\snext52 ul 5;}{\s53\li360\sb120\sa120\brdrb\brdrth\brdrw15 \f12\lang1024 \sbasedon0\snext0 hr;}}{\info{\title rtftohtml Users Guide}{\creatim\yr1994\mo7\dy16\hr17\min33}{\revtim\yr1994\mo7\dy25\hr10\min39}{\version3}{\edmins0}
{\nofpages0}{\nofwords65536}{\nofchars65536}{\vern16433}}\paperw12240\paperh15840\margl1417\margr1417\margt1417\margb1134\gutter0 \widowctrl\ftnbj\hyphhotz425 {\*\template C:\\WINDOWS\\WINWORD\\RTFTOWEB.DOT}\sectd 
\sbknone\linex0\headery709\footery709\colsx709\endnhere \pard\plain \li360 \f12\lang1024 
\pard \li360 This document contains directions for using the {\i rtftohtml} filter. 
\par \pard \li360 There are two ways that the rtftohtml filter may be used. You can take existing documents and translate them to HTML, or write new documents explicitly for the World Wide Web. This filter should accomodate both uses.
\par \pard\plain \s254\li360\sb240\sa240\keepn\brdrb\brdrs\brdrw15 \b\f12\fs36\lang1024 1 An Overview of rtftohtml
\par \pard\plain \li360 \f12\lang1024 rtftohtml reads up RTF format documents and translates them to HTML. In processing text, the filter chooses HTML markup based on three characteristics{\pard\plain \li360 \v\f12\lang1024 {\xe {\v 
characteristics of RTF-Documents}}}. These are
\par \pard\plain \s19\fi-720\li1080\tx1440 \f12\lang1024 1)\tab The destination{\pard\plain \s19\fi-720\li1080\tx1440 \v\f12\lang1024 {\xe {\v destination}}} of the text. Example destinations are header, footer, nootnote, picture.
\par 2)\tab The paragraph style{\pard\plain \s19\fi-720\li1080\tx1440 \v\f12\lang1024 {\xe {\v paragraph style}}}
. Paragraph styles are user-definable entities, but some are pre-defined by the word processing package. For Microsoft Word (on the Macintosh) examples are "Normal" and "heading 1". 
\par 3)\tab The text attributes{\pard\plain \s19\fi-720\li1080\tx1440 \v\f12\lang1024 {\xe {\v text attributes}}}.  Examples of text styles are bold, courier, 12 point.
\par \pard\plain \li360 \f12\lang1024 
\par \pard \li360 The filter has built-in rules for dealing with destinations. For paragraph and text styles, the rules for translation are contained in a file called html-trans{\pard\plain \li360 \v\f12\lang1024 {\xe {\v html-tr}{\v ans}}} (see Section 
{\plain \fs20\cf6\lang1024 5.1}). By modifying this file, you can train rtftohtml to perform the correct translations for your documents. The most common change that you will need to make is to add your own paragraph styles to html-trans.
\par \pard \li360 
\par \pard \li360 rtftohtml should produce reasonable HTML output{\pard\plain \li360 \v\f12\lang1024 {\xe {\v HTML output}}} for most documents. Here is what you can expect:
\par \pard\plain \s25\fi-180\li540\tx540 \f12\lang1024 \bullet \tab Your output should appear in a file called "xx.html" where "xx" or "xx.rtf" was your input file name.
\par \pard \s25\fi-180\li540\tx540 \bullet \tab Bold, italic and underlined text should appear with <b>,<i> and <u> markup
\par \bullet \tab Courier font text should appear with <tt> markup
\par \bullet \tab Tables will be formatted using <pre> markup (only plain text is supported in tables.)
\par \bullet \tab Footnotes will appear in a separate document with hypertext links to them.
\par \bullet \tab Table of contents, indexes, headers and footers are discarded.
\par \pard \s25\fi-180\li540\tx540 \bullet \tab Table of Contents{\pard\plain \s25\fi-180\li540\tx540 \v\f12\lang1024 {\xe {\v Table of Contents}}}
 entries and paragraphs with the style "heading 1..6" will generate a hypertext Table of Contents in a separate file. Each table of contents entry will link to the correct location in the main document.
\par \pard \s25\fi-180\li540\tx540 \bullet \tab All paragraph styles use in your document must appear in the file "html-trans" (see also {\plain \fs20\cf6\lang1024 5.1}
). This allows you to create a mapping from any paragraph style to any HTML markup. There are many pre-defined styles in html-trans, including "heading 1..6". (If a paragraph style is not found, a warning will be generated and the text will be written to 
the HTML file with no special markup.)
\par \pard \s25\fi-180\li540\tx540 \bullet \tab Each graphic{\pard\plain \s25\fi-180\li540\tx540 \v\f12\lang1024 {\xe {\v graphic}}} in your file will be written out to a separate file. The f
ilename will be "xxn.ext" where "xx" or "xx.rtf" was your input, "n" is a unique number and "ext" will be either "pict" for Macintosh PICT format graphics  or "wmf" for Windows Meta-Files format graphics. The HTML file will create links to these files, us
ing either "<A HREF=" or "<IMG SRC=" links. {\b SINCE most WWW browsers do not understand "wmf" or "pict" format files, the link will be to xxn.gif.  }This presumes that you will run some {\b other} filter to translate your graphic files to gif.
\par \pard \s25\fi-180\li540\tx540 \bullet \tab Text that is connected with copy/paste-link constructs will generate hypertext links.
\par \pard\plain \li360 \f12\lang1024 
\par \pard\plain \s254\li360\sb240\sa240\keepn\brdrb\brdrs\brdrw15 \b\f12\fs36\lang1024 2 How it works
\par \pard\plain \li360 \f12\lang1024 rtftohtml begins by reading html-trans and the character translation files. The rest of the processing is a loop of reading your RTF file and writing HTML. A high level overview{\pard\plain \li360 \v\f12\lang1024 {\xe {\v 
overview of processing}}} of this loop looks like this:
\par \pard\plain \s19\fi-720\li1080\tx1440 \f12\lang1024 1)\tab Read the next character. In doing so, the filter also reads all of the RTF markup that specifies the destination, paragraph and text styles of the next character.
\par \pard \s19\fi-720\li1080\tx1440 2)\tab Process the destination{\pard\plain \s19\fi-720\li1080\tx1440 \v\f12\lang1024 {\xe {\v destination}}}
 information. Normally, text is destined for the "body" of the document. Sometimes, the text belongs in a header, footnote or footer. The filter discards any text for headers, footers. For a footnote, the filter writes the text at the end of the document 
and generates a link to it.
\par 3)\tab Process any SPECIAL text styles{\pard\plain \s19\fi-720\li1080\tx1440 \v\f12\lang1024 {\xe {\v SPECIAL text styles}}}. The filter compares the text style information to see if it matches any entries in the .TMatch table (in html-trans, see {\plain 
\fs20\cf6\lang1024 5.1.4}). If there is a
 match and the entry is for "_Discard", "_Literal", "_Hot", "_HRef", "_Name" or "_Footnote" then the text will be processed accordingly. For example, "_Discard" text is discarded and "_Name" text will generate an anchor using the text as a name.
\par 4)\tab If the text was not SPECIAL, process the paragraph style{\pard\plain \s19\fi-720\li1080\tx1440 \v\f12\lang1024 {\xe {\v paragraph style}}}
. The filter takes the name of the paragraph style and looks it up in the list of paragraph styles in html-trans (in the .PMatch table, see {\plain \fs20\cf6\lang1024 5.1.3}). If the paragraph style is not found 
in the table it uses the first entry : "Normal". This entry has a nesting level and the name of the HTML "paragraph"{\fs18\up6 \chftn {\footnote \pard\plain \s245\fi-360\li720 \f12\fs20\lang1024 {\fs18\up6 \chftn }\tab 
In HTML, there are tags like <h1>, <ol> which describe the paragraph.s, and tags like <b> and <tt> which describe text. I call these "paragraph" markup and "text" markup respectively.}}
 markup to use. Using the HTML paragraph" markup name, the filter (using the .PTag table) knows what tags to generate for the text. 
\par 5)\tab If the text was not SPECIAL, process the text styles{\pard\plain \s19\fi-720\li1080\tx1440 \v\f12\lang1024 {\xe {\v text styles}}}
 again. The filter compares the text style information to see if it matches any entries in the .TMatch table (in html-trans, see {\plain \fs20\cf6\lang1024 5.1.4}). In this step, it is possible to match more than one
 entry. For each matched entry in the .TMatch table,  the filter uses the HTML "text" markup name, the filter (using the .TTag table, see {\plain \fs20\cf6\lang1024 5.1.2}) knows what tags to generate for the text. 
\par \pard\plain \li360 \f12\lang1024 
\par \pard \li360 Using this process, the filter can generate any HTML markup for any combination of paragraph style and text style. 
\par \pard \li360 
\par \pard\plain \s254\li360\sb240\sa240\keepn\brdrb\brdrs\brdrw15 \b\f12\fs36\lang1024 3 What about Graphics{\pard\plain \s254\li360\sb240\sa240\keepn\brdrb\brdrs\brdrw15 \b\v\f12\fs36\lang1024 {\xe {\v Graphics}}}?
\par \pard\plain \li360 \f12\lang1024 Graphics are imbedded in RTF in either a binary format or an (ASCII) hex dump of that binary. I have never seen a binary format graphic  - I don't think that the f
ilter will process binary correctly. It does handle the hex format of graphics, by converting the hex back into binary and writing the binary to a file. The file extension is chosen by looking at the original type of the graphic. The following list shows 
the file types and their extensions:
\par \pard \li360 
\par \pard\plain \s9\fi-3960\li4320\tx4320 \f12\lang1024 Macintosh PICT \tab .pict  - also, 256 bytes of nulls are prepended to the graphic. This is to conform to the PICT file format.
\par \pard \s9\fi-3960\li4320\tx4320 Windows Meta-files\tab .wmf {\fs18\up6 \chftn {\footnote \pard\plain \s245\li360 \f12\fs20\lang1024 {\fs18\up6 \chftn }\tab The filter may not correctly generate wmf files. I am still lo
oking for information on wmf file format. If you have any information on wmf file formats, please send it to me at cjh@cray.com.}}
\par \pard \s9\fi-3960\li4320\tx4320 Windows Bit-map\tab .bmp
\par \pard\plain \li360 \f12\lang1024 
\par \pard \li360 In addition, the filter produces a link t
o the file containing the graphic. Now, since the above graphic formats are not very portable, the filter assumes that you will convert these files to something more useful, like GIF. So the format of the link is:
\par \pard \li360 {\f14 <a href="basenameN.ext">Click here for a Picture</a>
\par }\pard \li360 where 
\par \pard\plain \s25\fi-180\li540\tx540 \f12\lang1024 \bullet \tab {\f14 basename} is the name of the input document (without the .rtf extension)
\par \bullet \tab {\f14 N} is a unique number (starting at 1)
\par \pard \s25\fi-180\li540\tx540 \bullet \tab {\f14 ext} is an extension. This defaults to GIF, but can be overidden with the -P command line option.
\par \pard \s25\fi-180\li540\tx540 
\par \pard\plain \li360 \f12\lang1024 You can also change the link to an IMG form. If you specify the -I command line option, all links to graphics will be of the form:
\par \pard \li360 {\f14 <IMG src="basenameN.ext">}
\par \pard \li360 
\par \pard \li360 There is one other special case. If a graphic is encountered when the filter is in the process of generating a link, the IMG form of the link is used even without the -I command line option.
\par \pard\plain \s254\li360\sb240\sa240\keepn\brdrb\brdrs\brdrw15 \b\f12\fs36\lang1024 4 Special Processing
\par \pard\plain \li360 \f12\lang1024 In the following discussion of SPECIAL processing{\pard\plain \li360 \v\f12\lang1024 {\xe {\v SPECIAL processing}}}, I will assume that rtftohtml has not been customized. If it has, the text style
s used to create special effects may be different. 
\par \pard\plain \s253\li360\sb120\sa120\keepn\brdrb\brdrs\brdrw15 \b\f12\fs28\lang1024 4.1 Making a Named Anchor{\pard\plain \s253\li360\sb120\sa120\keepn\brdrb\brdrs\brdrw15 \b\v\f12\fs28\lang1024 {\xe {\v Named Anchors}}}
\par \pard\plain \li360 \f12\lang1024 
To make a named anchor, you simply enter the name in the document where you would like the anchor to appear. Then format the text using Outline and Hidden. Be careful in formatting the text that you format ONLY the name - be careful not to format leading 
and trailing spaces or paragraph marks. As an example, if the text - Named Anchor Example - were formatted with Outline and Hidden, it would produce the HTML output :
\par \pard \li360 <a name="Named Anchor Example"></a>
\par 
\par \pard \li360 To change the formatting that produces named anchors, you need to modify the entry in html-trans that specifies "_Name" formatting.
\par \pard\plain \s253\li360\sb120\sa120\keepn\brdrb\brdrs\brdrw15 \b\f12\fs28\lang1024 4.2 Footnote{\pard\plain \s253\li360\sb120\sa120\keepn\brdrb\brdrs\brdrw15 \b\v\f12\fs28\lang1024 {\xe {\v Footnote}}}/Endnote{\pard\plain \s253\li360\sb120\sa120\keepn
\brdrb\brdrs\brdrw15 \b\v\f12\fs28\lang1024 {\xe {\v Endnote}}} Processing
\par \pard\plain \li360 \f12\lang1024 
If your RTF document contains footnotes or endnotes, the filter will place the text of the footnote in aseparate HTML document.  At the footnote reference mark, the filter will generate a hypertext link to the text of the footnote. This works with either 
automatically numbered footnotes{\fs18\up6 \chftn {\footnote \pard\plain \s245\li360 \f12\fs20\lang1024 {\fs18\up6 \chftn }\tab Look, there is one now!}}, or user supplied footnote reference marks{\fs18\up6 +{\footnote \pard\plain \s245\li360 
\f12\fs20\lang1024 {\fs18\up6 +} \tab There is my mark.}} 
\par \pard\plain \s253\li360\sb120\sa120\keepn\brdrb\brdrs\brdrw15 \b\f12\fs28\lang1024 4.3 Discarding Unwanted Text{\pard\plain \s253\li360\sb120\sa120\keepn\brdrb\brdrs\brdrw15 \b\v\f12\fs28\lang1024 {\xe {\v Discarding Text}}}
\par \pard\plain \li360 \f12\lang1024 If you have text that you do not want to appear in the HTML output, simply format the text as Hidden and Plain (that is, no underline, outline...). 
\par If you wish to modify the formatting that discards text, you need to change the entry in html-trans that specifies "_Discard".{\b 
\par }\pard\plain \s253\li360\sb120\sa120\keepn\brdrb\brdrs\brdrw15 \b\f12\fs28\lang1024 4.4 Imbedding HTML{\pard\plain \s253\li360\sb120\sa120\keepn\brdrb\brdrs\brdrw15 \b\v\f12\fs28\lang1024 {\xe {\v Imbedding HTML}}} in a Document
\par \pard\plain \li360 \f12\lang1024 Normally, if your RTF document contained the text "<cite>he
llo</cite>", the translator would output this as: "&lt;cite&gt;hello&lt;/cite&gt;". This ensures that the text would appear in your HTML output exactly as it appeared in the original RTF document. If, however, you want the <cite></cite> to be interpreted 
as HTML markup, you must format the tags using Hidden and Shadow. The filter will then send the tags through without translation. 
\par \pard \li360 When the rtftohtml filter produces HTML markup, it keeps track of the nesting level of tags{\pard\plain \li360 \v\f12\lang1024 {\xe {\v nesting level of tags}}} to en
sure that you don't get something like <b><cite>hello</b></cite> which would be incorrect markup. If you imbed HTML markup in your document, the filter will NOT be aware of it. You must ensure that your markup appears correctly nested.
\par If you wish to modify the formatting for imbedded HTML, you need to change the entry in html-trans that specifies "_Literal{\pard\plain \li360 \v\f12\lang1024 {\xe {\v _Literal}}}".{\b 
\par }\pard \li360 
\par \pard\plain \s254\li360\sb240\sa240\keepn\brdrb\brdrs\brdrw15 \b\f12\fs36\lang1024 5 Customizing rtftohtml{\pard\plain \s254\li360\sb240\sa240\keepn\brdrb\brdrs\brdrw15 \b\v\f12\fs36\lang1024 {\xe {\v Customizing rtftohtml}}}
\par \pard\plain \li360 \f12\lang1024 Some customizations of rtftohtml require a little understanding of how the filter work, others require a lot. All of the customizations involve editing either html-trans or one of the character translation files. 
\par \pard\plain \s253\li360\sb120\sa120\keepn\brdrb\brdrs\brdrw15 \b\f12\fs28\lang1024 5.1 html-trans File Format{\pard\plain \s253\li360\sb120\sa120\keepn\brdrb\brdrs\brdrw15 \b\v\f12\fs28\lang1024 {\xe {\v html-trans File Format}}}
\par \pard\plain \li360 \f12\lang1024 
In html-trans there are four tables. They are .PTag, .TTag, .PMatch and .TMatch. These tables begin with the name (in column one) and continue until the next table starts. All blank lines and lines beginning with a '#' are discarded. '#' lines are typical
ly used for comments. The tables themselves are composed of records containing a fixed number of fields which are separated by commas. The fields are either strings (which should be quoted) integers or bitmasks.
\par \pard \li360 
\par \pard\plain \s252\li360\sb120\sa120\keepn \b\f12\fs28\lang1024 5.1.1 .PTag Table{\pard\plain \s252\li360\sb120\sa120\keepn \b\v\f12\fs28\lang1024 {\xe {\v .PTag Table}}}
\par \pard\plain \li360 \f12\lang1024 Each entry in the .PTag table describes an HTML paragraph markup{\pard\plain \li360 \v\f12\lang1024 {\xe {\v HTML paragraph markup}}}. The format is: 
\par \pard \li360 .PTag
\par \pard \li360 #"name","starttag","endtag","col2mark","tabmark","parmark",allowtext,cannest,DeleteCol1,fold,TocStyl
\par \pard\plain \s9\fi-3960\li4320\tx4320 \f12\lang1024 {\b name}\tab A unique name for this entry. These names are referenced in the .PMatch table.
\par {\b starttag}\tab This string will be output once at the beginning of any text for this markup.
\par {\b endtag}\tab This string will be output once at the end of any text for this markup.
\par {\b col2mark}\tab This string will be output  in place of the first tab in every paragraph (used for lists)
\par {\b parmark}\tab This string will be output in place of each paragraph mark. (usually <br> or <p>)
\par \pard \s9\fi-3960\li4320\tx4320 {\b allowtext}\tab If 0, no text markup will be allowed within this markup. (for example <pre> or <h1> don't format well if they contain additional markup.
\par \pard \s9\fi-3960\li4320\tx4320 {\b cannest}\tab If 1, other paragraph markup will be allowed to nest within this markup. (used for nesting lists)
\par \pard \s9\fi-3960\li4320\tx4320 {\b DeleteCol1}\tab If 1, all text up to the first tab in a paragraph will be deleted. (used to strip out bullets that when going to unordered lists (<ul>).
\par \pard \s9\fi-3960\li4320\tx4320 {\b fold}\tab If 1, the filter will add newlines to the HTML to keep the number of characters in a line to less than 80. For <pre> or <listing> elements, this should be set to 0.
\par \pard \s9\fi-3960\li4320\tx4320 {\b TocStyl}\tab The TOC level. If greater than 0, the filter will create a Table of contents entry for every paragraph using this markup. 
\par \pard\plain \li360 \f12\lang1024 
\par 
\par \pard\plain \s251\li360\sb120\sa120\keepn \b\f12\fs28\lang1024 5.1.1.1 Sample .PTag Entries
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 "h1","<h1>\\n","</h1>\\n","\\t","\\t","<br>\\n",0,0,0,1
\par \pard\plain \li360 \f12\lang1024 This is a level 1 heading.  The "\\
n" in the start and end-tag fields forcesa newline in the HTML markup. Since newlines are ignored in HTML (except in <pre>) it's only effect is to make the HTML output more readable. There is no difference between the fir
st tab and any other. They both translate to a tab mark. Paragraph marks generate "<br>" followed by a newline (just for looks). Text markup (like 
<b>) is not allowed within <h1> text, because we leave that up to the HTML client. No nesting is allowed - (see the discussion on nested styles in section {\plain \fs20\cf6\lang1024 7}
). No text is deleted. Every paragraph using this markup will also generate a level-1 table of contents entry.
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 
\par "Normal","","\\n","\\t","\\t","<p>\\n",1,0,0,0
\par \pard\plain \li360 \f12\lang1024 This is the default for normal text. Regular text in HTML has no required start and end-tags. The "\\n" in the end-tag field forces a newline in the HTML markup. Since newlines are ignored in HTML (e
xcept in <pre>) it's only effect is to make the HTML output more readable. There is no difference between the first tab and any other. They both translate to a tab mark. Paragraph marks generate "<p>" followed by a newline (just for looks). Text markup (l
ike <b>) is allowed within Normal text. No nesting is allowed - (see the discussion on nested styles in section {\plain \fs20\cf6\lang1024 7}). No text is deleted.
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 
\par "ul","<ul>\\n<li>","</ul>","\\t","\\t","\\n<li>",1,1,0,0
\par \pard\plain \li360 \f12\lang1024 This is the entry for unordered lists. This generates a "<ul>\\n<
li>" at the start of the list and "</ul>/n" at the end. There is no difference between the first tab and any other. They both translate to a tab mark. Paragraph marks generate "<li>" preceded by a newline (just for looks). Text markup (like <b>) is allowe
d, and this entry may be nested - and it allows others to be nested within it. This allows nested lists. No text is deleted.
\par \pard \li360 
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 "ul-d","<ul>\\n<li>","</ul>","\\t","\\t","\\n<li>",1,1,1,0
\par \pard\plain \li360 \f12\lang1024 This entry is identical to the previous except that the DeleteCol1 field is set to 1. This is used to remove bullets (which really appear in the RTF) because we don't want to see them in the HTML.
\par \pard \li360 
\par \pard\plain \s252\li360\sb120\sa120\keepn \b\f12\fs28\lang1024 5.1.2 .TTag Table{\pard\plain \s252\li360\sb120\sa120\keepn \b\v\f12\fs28\lang1024 {\xe {\v .TTag Table}}}
\par \pard\plain \li360 \f12\lang1024 Each entry in the .TTag table describes an HTML text markup{\pard\plain \li360 \v\f12\lang1024 {\xe {\v HTML text markup}}}. The format is: 
\par \pard \li360 .TTag
\par "name","starttag","endtag"
\par \pard\plain \s9\fi-3960\li4320\tx4320 \f12\lang1024 {\b name}\tab A unique name for this entry. These names are referenced in the .PMatch table.
\par {\b starttag}\tab This string will be output once at the beginning of any text for this markup.
\par {\b endtag}\tab This string will be output once at the end of any text for this markup.
\par \pard\plain \li360 \f12\lang1024 
Note that unlike the .PTag table, no text markup should appear more than once. (Of course there is no good reason that it should appear.) If you have two entries with <b></b> start and end tags, it would be possible to get HTML of the form <b><b> text</b>
</b>. I don't know if this is invalid markup, but it sure is ugly.
\par \pard \li360 
\par \pard\plain \s252\li360\sb120\sa120\keepn \b\f12\fs28\lang1024 5.1.3 .PMatch Table{\pard\plain \s252\li360\sb120\sa120\keepn \b\v\f12\fs28\lang1024 {\xe {\v .PMatch Table}}}
\par \pard\plain \li360 \f12\lang1024 Each entry in the .PMatch correlates a paragraph style{\pard\plain \li360 \v\f12\lang1024 {\xe {\v paragraph style}}} name to some entry in the .PTag table. The format is: 
\par \pard \li360 .PMatch
\par "Paragraph Style",nesting_level,"PTagName"
\par \pard\plain \s9\fi-3960\li4320\tx4320 \f12\lang1024 {\b Paragraph Style}\tab The paragraph style name that appears in the RTF input.
\par {\b nesting_level}\tab The nesting level. This should be zero except for nested list entries.
\par {\b PTagName}\tab The name of the .PTag entry that should be used for paragraphs with this paragraph style. 
\par \pard\plain \li360 \f12\lang1024 
\par 
\par \pard\plain \s251\li360\sb120\sa120\keepn \b\f12\fs28\lang1024 5.1.3.1 Sample .PMatch Entries
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 "heading 1",0,"h1"
\par \pard\plain \li360 \f12\lang1024 This is a level 1 heading.  Any paragraphs with this paragraph style will be mapped to the entry in the .PTag table named "h1".
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 
\par "numbered list",0,"ol-d"
\par \pard\plain \li360 \f12\lang1024 This is used for numbered lists.  Any paragraphs with this paragraph style will be mapped to the entry in the .PTag table named "ol-d". 
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 
\par "numbered list 2",2,"ol-d"
\par \pard\plain \li360 \f12\lang1024 
This is an entry for a nested paragraph style. The nesting level of two is used to indicate that this paragraph should appear in the HTML nested within two levels of paragraph markups. The paragraph marked with this style may only appear after  a paragrap
h style that has a nesting level of 1 or greater.
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 
\par \pard\plain \li360 \f12\lang1024 
\par \pard\plain \s252\li360\sb120\sa120\keepn \b\f12\fs28\lang1024 5.1.4 .TMatch Table{\pard\plain \s252\li360\sb120\sa120\keepn \b\v\f12\fs28\lang1024 {\xe {\v .TMatch Table}}}
\par \pard\plain \li360 \f12\lang1024 Each entry in the .TMatch table describes processing for text styles{\pard\plain \li360 \v\f12\lang1024 {\xe {\v text styles}}}. The format is: 
\par \pard \li360 .TMatch
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 "Font",FontSize,Match,Mask,"TextStyleName"
\par \pard\plain \s9\fi-3960\li4320\tx4320 \f12\lang1024 {\b Font}\tab The name of a Font, or "" if all fonts match this entry.
\par {\b FontSize}\tab The point-size of the font, or 0 if all point sizes match this entry.,
\par \pard \s9\fi-3960\li4320\tx4320 {\b Match}\tab A bit-mask, where each bit represents a text attribute. These bits are compared to the attributes of the style being output. They must match for this entry
 to be matched. One in a bit position means that the text style is set, a zero is not set.
\par \pard \s9\fi-3960\li4320\tx4320 {\b Mask}\tab 
A bit-mask, where each bit represents a text attribute. In comparing the style of the text being processed, to the Match bit-mask, this field is used to select the bits that matter. If a zero appears in a  bit-position, then that style attribute is ignor
ed (for the purpose of matching this entry.) Only 1 bits are used in the above comparision.
\par \pard \s9\fi-3960\li4320\tx4320 {\b TextStyleName}\tab This is either the name of an entry in the .TTag table indicating the HTML markup to use, or it is one of "_Discard", "_Name",  "_HRef", "_Hot", or "_Literal".
\par \pard\plain \li360 \f12\lang1024 
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 The order of bits in the Match and Mask bit-maps are:
\par #    v^bDWUHACSOTIB - Bold
\par #    v^bDWUHACSOTI - Italic
\par #    v^bDWUHACSOT - StrikeThrough
\par #    v^bDWUHACSO - Outline
\par #    v^bDWUHACS - Shadow
\par #    v^bDWUHAC - SmallCaps
\par #    v^bDWUHA - AllCaps
\par #    v^bDWUH - Hidden
\par #    v^bDWU - Underline
\par #    v^bDW - Word Underline
\par #    v^bD - Dotted Underline
\par #    v^b - Double Underline
\par #    v^ - SuperScript
\par #    v - SubScript
\par \pard\plain \li360 \f12\lang1024 
\par 
\par \pard\plain \s251\li360\sb120\sa120\keepn \b\f12\fs28\lang1024 5.1.4.1 Sample .TMatch Entries
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 # double-underline/not hidden -> hot text
\par # double-underline/hidden -> href
\par #    v^bDWUHACSOTIB,v^bDWUHACSOTIB
\par "",0,00100000000000,00100010000000,"_Hot"
\par "",0,00100010000000,00100010000000,"_HRef"
\par \pard\plain \li360 \f12\lang1024 
The first entry will match any text formatted with double underline EXCEPT if it is hidden text. This is accomplished by using those two bits to compare (the MASK field) and having a 1 in the double underline bit and a zero for the hidden text b
it. The second entry will match any text formatted with BOTH double underline and hidden text. Any text that matches the first will be treated as the hot text of a link. Any text that matches the second will be taken as the href itself. (The filter requir
es that the HRef text immediately precede the Hot text.) 
\par \pard \li360 
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 # Regular matches - You can have multiple of these active
\par # monospace fonts -> tt
\par "Courier",0,00000000000000,00000000000000,"tt"
\par \pard\plain \li360 \f12\lang1024 This will match any text that uses the Courier font and mark it using the HTML text markup appearing in the .TTag table with the entry name "tt".
\par \pard \li360 
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 # bold -> bold
\par #    v^bDWUIACSOTIB,v^bDWUIACSOTIB
\par "",0,00000000000001,00000000000001,"b"
\par \pard\plain \li360 \f12\lang1024 
This will match any text that has bold attributes and will mark it using the HTML text markup appearing in the .TTag table with the entry name "b". Note that bold text using the Courier font would match both this entry and the previous. This will yeild ma
rkup of the form <b><tt>hi</tt><b>. Note that "b" is the name of an entry in the .TTag table, not the HTML markup that is used! 
\par \pard \li360 
\par \pard\plain \s253\li360\sb120\sa120\keepn\brdrb\brdrs\brdrw15 \b\f12\fs28\lang1024 5.2 Adding Paragraph Styles
\par \pard\plain \li360 \f12\lang1024 To add a new paragraph style{\pard\plain \li360 \v\f12\lang1024 {\xe {\v paragraph style, add a new}}}
, simply go to the .PMatch table and add an entry to the end. Put the name of the paragraph style (quoted), the nesting level (usually zero) and the name of the .PTag entry that should be used. 
\par \pard\plain \s254\li360\sb240\sa240\keepn\brdrb\brdrs\brdrw15 \b\f12\fs36\lang1024 6 Command Line Options{\pard\plain \s254\li360\sb240\sa240\keepn\brdrb\brdrs\brdrw15 \b\v\f12\fs36\lang1024 {\xe {\v Command Line Options}}}
\par \pard\plain \li360 \f12\lang1024 The syntax of the rtftohtml command is as follows:
\par \pard\plain \s15\li360\ri880\keep\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f14\fs20\lang1024 rtftohtml [-i] [-o filename] [-P extension] [-T] [-G][file]
\par \pard\plain \s9\fi-3960\li4320\tx4320 \f12\lang1024 {\b -i}\tab Indicates that imbedded graphics{\pard\plain \s9\fi-3960\li4320\tx4320 \v\f12\lang1024 {\xe {\v graphics}}}
 should be linked into the main document using an IMG tag. The default is to use an HREF style link.
\par {\b -o filename}\tab Indicates that the output file name{\pard\plain \s9\fi-3960\li4320\tx4320 \v\f12\lang1024 {\xe {\v output file name}}}
 should be "filename". If any other files are created (such as for graphics,) the basename of the other files will be "filename" without ".rtf" if it is present in the name.
\par \pard \s9\fi-3960\li4320\tx4320 {\b -P extension}\tab Use "extension" as the extension for any links to graphics files. The default for this is "gif".
\par \pard \s9\fi-3960\li4320\tx4320 {\b -T}\tab Indicates that no table of contents file{\pard\plain \s9\fi-3960\li4320\tx4320 \v\f12\lang1024 {\xe {\v table of contents file}}} is to be generated.
\par {\b -G}\tab Indicates that no graphics files{\pard\plain \s9\fi-3960\li4320\tx4320 \v\f12\lang1024 {\xe {\v graphics files}}}
 should be written. The hypertext links to the graphics files will still be generated. This is a performance feature for when you are re-translating a document and the graphics have not changed.
\par {\b "file"}\tab The file name to be processed. If no file is given, standard input{\pard\plain \s9\fi-3960\li4320\tx4320 \v\f12\lang1024 {\xe {\v standard input}}} is used. If standard input is used, the body of the document will be written to stand
ard output (unless overridden by the -o option.) If a file name appears, the output is written to "filename" with ".html" as an extension. (If ".rtf" appears as an extension on the original input file, it is stripped before appending the ".html") 
\par \pard\plain \s254\li360\sb240\sa240\keepn\brdrb\brdrs\brdrw15 \b\f12\fs36\lang1024 7 Nested Lists{\pard\plain \s254\li360\sb240\sa240\keepn\brdrb\brdrs\brdrw15 \b\v\f12\fs36\lang1024 {\xe {\v Nested Lists}}}
\par \pard\plain \li360 \f12\lang1024 
Nested lists can be made from an RTF document by using a different style for each level of indentation. The styles "bullet list 1" "numbered list 2" ... represent different levels of nesting. The only rule for use is that no lev
els of nesting are skipped. For example, a "ol 3" paragraph must not appear immediately after a "Normal" paragraph. It must follow a paragraph with a nesting level of 2 or higher. For examples of nesting see {\v\uldb sample_styles.html}{\uldb 
 the sample style sheet.} .rtf
\par }
