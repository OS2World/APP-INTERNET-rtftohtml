{\rtf1\ansi \deff4\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\fnil\fcharset2\fprq2 Wingdings;}{\f13\fnil\fcharset2\fprq2 Fences;}{\f14\fnil\fcharset2\fprq2 MT Extra;}{\f15\fswiss\fcharset0\fprq2 AvantGarde;}
{\f16\froman\fcharset0\fprq2 Bookman;}{\f17\fswiss\fcharset0\fprq2 Helvetica-Narrow;}{\f18\froman\fcharset0\fprq2 NewCenturySchlbk;}{\f19\froman\fcharset0\fprq2 Palatino;}{\f20\fscript\fcharset0\fprq2 ZapfChancery;}
{\f21\fdecor\fcharset2\fprq2 ZapfDingbats;}{\f22\fmodern\fcharset255\fprq2 Modern;}{\f23\fscript\fcharset255\fprq2 Script;}{\f24\froman\fcharset255\fprq2 Roman;}{\f25\fswiss\fcharset0\fprq1 MS Dialog;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;
\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;
\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\f4\lang1031 \snext0 Normal;}{\s1\sb240\sa60\keepn \b\f5\fs48\lang1031\kerning28 \sbasedon0\snext0 heading 1;}{\s2\sb240\sa60\keepn \b\f5\fs36\lang1031 
\sbasedon0\snext0 heading 2;}{\s3\sb240\sa60\keepn \b\f5\fs28\lang1031 \sbasedon0\snext0 heading 3;}{\s4\sb240\sa60\keepn \b\f5\lang1031 \sbasedon0\snext0 heading 4;}{\s5\sb240\sa60 \b\f5\fs22\lang1031 \sbasedon0\snext0 heading 5;}{\s6\sb240\sa60 
\b\f5\fs20\lang1031 \sbasedon0\snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}{\s15\sb120\brdrb\brdrth\brdrw15 \f8\lang1031 \sbasedon0\snext0 hr;}{\s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 
\sbasedon0\snext16 pre;}{\s17 \i\f4\lang1031 \sbasedon0\snext17 address;}{\s18\li1418\ri1418 \i\f4\lang1031 \sbasedon0\snext18 blockquote;}{\s19\fi-540\li900\tx900 \f8\lang1031 \sbasedon0\snext19 numbered list;}{\s20\fi-540\li1440\tx1440 \f8\lang1031 
\sbasedon0\snext20 numbered list 1;}{\s21\fi-540\li1980\tx1980 \f8\lang1031 \sbasedon0\snext21 numbered list 2;}{\s22\fi-280\li900\tx900 \f8\lang1031 \sbasedon19\snext22 bullet list;}{\s23\fi-280\li1440\tx1440 \f8\lang1031 \sbasedon20\snext23 
bullet list 1;}{\s24\fi-280\li1980\tx1980 \f8\lang1031 \sbasedon21\snext24 bullet list 2;}{\s25\fi-3960\li4320\tx4320 \f8\lang1031 \sbasedon0\snext25 glossary;}{\s26\fi-3960\li4860\tx4860 \f8\lang1031 \sbasedon25\snext26 glossary 1;}{
\s27\fi-3960\li5400\tx5400 \f8\lang1031 \sbasedon26\snext27 glossary 2;}{\s28\fi360\tx360\tx3600\tx4320\tx7200\tx10700 \f8\lang1031 \sbasedon0\snext28 dir;}{\s29\fi360\tx720\tx3960\tx4320\tx7560\tx10700 \f8\lang1031 \sbasedon0\snext29 dir 1;}{
\s30\fi360\li720\tx1080\tx4320\tx7920\tx10700 \f8\lang1031 \sbasedon0\snext30 dir 2;}{\s31\fi-720\li1440\tx1440 \f8\lang1031 \sbasedon17\snext31 menu 1;}{\s32\fi-720\li1080\tx1080 \f8\lang1031 \sbasedon31\snext32 menu;}{\s33\fi-720\li1800\tx1800 
\f8\lang1031 \sbasedon0\snext33 menu 2;}{\s34\li360 \f8\lang1031 \sbasedon25\snext34 TERM;}{\s35\li900 \f8\lang1031 \sbasedon25\snext35 DEF;}{\s36\fi-3960\li4860\tx4860 \f8\lang1031 \sbasedon26\snext36 TERM 1;}{\s37\li1440 \f8\lang1031 
\sbasedon26\snext37 DEF 1;}{\s38\li1440 \f8\lang1031 \sbasedon27\snext38 TERM 2;}{\s39\li1980 \f8\lang1031 \sbasedon38\snext39 DEF 2;}{\s40 \f3\lang1031 \sbasedon0\snext40 HTML;}{\s41 \f4\fs20\lang1024 \sbasedon0\snext23 bullet list 3;}{\s42 
\f4\fs20\lang1024 \sbasedon0\snext20 numbered list 3;}{\s43 \f4\fs20\lang1024 \sbasedon0\snext26 glossary 3;}{\s44 \f4\fs20\lang1024 \sbasedon0\snext44 footnote text;}{\s45\fi-283\li283{\*\pn \pnlvl11\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}
\f4\lang1031 \sbasedon0\snext45 List Bullet;}}{\info{\title Using rtftohtml/rtftoweb}{\author Unbekannt}{\operator Unbekannt}{\creatim\yr1995\mo8\dy31\hr16\min4}{\revtim\yr1995\mo9\dy4\hr20\min8}{\version3}{\edmins0}{\nofpages17}{\nofwords5142}
{\nofchars29310}{\vern49205}}\paperw11906\paperh16838\margl1417\margr1417\margt1417\margb1134 \deftab708\widowctrl\ftnbj\aenddoc\hyphhotz425\linkstyles\formshade \fet0{\*\template C:\\WORK\\RTFTOWEB.DOT}\sectd 
\linex0\headery709\footery709\colsx709\endnhere {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \f4\lang1031 {\v\fs28\super Guide}
\par \pard {\b A Guide To Using rtftohtml and rtftoweb
\par }
\par \pard \qc {\i rtftohtml, written by Chris Hector, is a conversion utility to generate HTML documents, which are used within the World Wide Web, from RTF source. rtftoweb extends rtftohtml by a few additional functions such 
as automatic splitting of the document, inserting a navigation panel into the HTML files and generating an index with active links. Together these tools provide quite a comfortable and yet powerful means to get your (Word or 
whatever) documents on the Web.\line And the best thing is: Both tools may be freely copied.
\par }\pard\plain \s15\sb120\brdrb\brdrth\brdrw15 \f8\lang1031 
\par \pard\plain \f4\lang1031 
\par This guide describes rtftohtml version 2.7.5, written by Chris Hector ({\cf6 cjh@cray.com}) and rtftoweb version 1.6, written by Christian Bolik ({\cf6 zzhibol@rrzn-user.uni-hannover.de}), that\rquote s me. My email ad
dress will probably change during October \lquote 95, but I hope these pages may remain in place.
\par 
\par Read about the {\v\uldb feat1.6}{\uldb new features and bug fixes} of rtftoweb 1.6, dated 31.08.95, in the {\v\uldb CHANGES}{\uldb ChangeLog}.
\par 
\par Some parts of this guide have been copied from Chris\rquote  rtftohtml User\rquote 
s Guide. The main purpose of this document is to have all information regarding the conversion from RTF to HTML via rtftohtml/rtftoweb in one place. It also is an example of what you can expect from rtftohtml/rtftoweb, since it has been conver
ted from a Microsoft Word 6.0 document (exported as RTF) to HTML by using the extended rtftohtml.
\par \pard 
\par \pard\plain \s17 \i\f4\lang1031 Christian Bolik ({\cf6 zzhibol@rrzn-user.uni-hannover.de}), 04.09.95
\par \pard\plain \f4\lang1031 
\par \pard\plain \s1\sb240\sa60\keepn \b\f5\fs48\lang1031\kerning28 What is rtftohtml?
\par \pard\plain \f4\lang1031 
\par {\v\fs28\super rtftohtml}rtftohtml{\pard\plain \v\f4\lang1031 {\xe {rtftohtml}}} is a tool to turn your, say, Word documents into documents which may be read from within the World Wide Web. The format of these documents is called {\b H}yper{\b T}ext {\b M
}arkup {\b L}anguage (HTML{\pard\plain \v\f4\lang1031 {\xe {HTML}}}). rtftohtml is able to automatically convert documents stored in RTF ({\b R}ich {\b T}ext {\b F}ormat) {\pard\plain \v\f4\lang1031 {\xe {RTF}}}
 to HTML. Most word processors in use on UNIX, Macintosh, PC or NeXT systems can export their documents in RTF format (hint: have a look at the \ldblquote Save as...\rdblquote  dialog box of your favorite word processor).
\par 
\par The author of rtftohtml is Chris Hector. Have a look at his {\v\uldb http://www.cray.com}{\uldb Web pages at Cray}.
\par 
\par \pard In processing text, rtftohtml chooses HTML markup based on three characteristics. These are
\par \pard\plain \s19\fi-540\li900\tx900 \f8\lang1031 1)\tab The destination{\pard\plain \s19\fi-540\li900\tx900 \v\f8\lang1031 {\xe {destination}}} of the text. Example destinations are header, footer, footnote, picture.
\par 2)\tab The paragraph style{\pard\plain \s19\fi-540\li900\tx900 \v\f8\lang1031 {\xe {paragraph styles}}}
. Paragraph styles are user-definable entities, but some are pre-defined by the word processing package. For Microsoft Word (on the Macintosh) examples are "Normal" and "heading 1" or (\ldblquote \'dcberschrift 1\rdblquote  when using a german version). 

\par 3)\tab The text attributes{\pard\plain \s19\fi-540\li900\tx900 \v\f8\lang1031 {\xe {text attributes}}}.  Examples of text styles are bold, courier, 12 point.
\par \pard\plain \f4\lang1031 
\par The filter has built-in rules for dealing with destinations. For paragraph and text styles, the rules for translation are contained in a file called {\cf6 html-trans}
. By modifying this file, you can train rtftohtml to perform the correct translations for your documents. The most common change that you will need to make is to add your own paragraph styles to html-trans.
\par 
\par \pard rtftohtml should produce reasonable HTML output for most documents. Here is what you can expect:
\par \pard\plain \s22\fi-280\li900\tx900 \f8\lang1031 \bullet \tab Your output should appear in a file called "xx.html" where "xx" or "xx.rtf" was your input file name.
\par \bullet \tab Bold, italic and underlined text should appear with <b>,<i> and <u> markup
\par \bullet \tab Courier font text should appear with <tt> markup
\par \bullet \tab Tables will be formatted using <pre> markup (only plain text is supported in tables.)
\par \bullet \tab Footnotes will appear in a separate document with hypertext links to them.
\par \bullet \tab Table of contents, indexes, headers and footers are discarded.
\par \bullet \tab Table of Contents entries and paragraphs with the style "heading 1..6" will generate a hypertext Table of Contents in a separate file. Each table of contents entry will link to the correct location in the main document.
\par \bullet \tab All parag
raph styles used in your document should appear in the file "html-trans". This allows you to create a mapping from any paragraph style to any HTML markup. There are many pre-defined styles in html-trans, including "heading 1..6". (If a paragraph style is 
not found, a warning will be generated and the text will be written to the HTML file with no special markup.)
\par \bullet \tab Each graphic in your file will be written out to a separate file. The filename will be "xxn.ext" where "xx" or "xx.rtf" was your input, "n" is a 
unique number and "ext" will be either "pict" for Macintosh PICT format graphics  or "wmf" for Windows Meta-Files format graphics. The HTML file will create links to these files, using either "<A HREF=" or "<IMG SRC=" links. {\b 
SINCE most WWW browsers do not understand "wmf" or "pict" format files, the link will be to xxn.gif.  }This presumes that you will run some {\b other} filter to translate your graphic files to gif.
\par \pard \s22\fi-280\li900\tx900 \bullet \tab Text that is connected with copy/paste-link constructs, or tagged with some special text attributes will generate hypertext links.
\par \pard\plain \f4\lang1031 
\par \pard\plain \s1\sb240\sa60\keepn \b\f5\fs48\lang1031\kerning28 What is rtftoweb?
\par \pard\plain \f4\lang1031 {\i 
\par }{\v\fs28\super rtftoweb}rtftoweb{\pard\plain \v\f4\lang1031 {\xe {rtftoweb}}} is an extension of Chris Hector's very excellent rtftohtml (see section {\cf6 What is rtftohtml}
), which converts RTF-Documents to HTML, which in turn is used within the World Wide Web Project. rtftohtml{\i  }
converts a linear RTF-Document to an also linear HTML-Document, with little support for hypertext and without any structuring (well, since version 2.7 this isn't quite true anymore, but that table of contents doesn't turn your documents into hypertext).  

\par 
\par This is where {\i rtftoweb} comes in.  
\par 
\par rtftoweb converts a linear RTF-Document (that may contain cross references, index entries and footnotes) into a fully hypertexted set of HTML-Documents. 
\par 
\par \pard 
This document, that you are reading right now, is an example of what you can expect from using an rtftohtml which has been extended by rtftoweb, since it was created from an RTF-source by rtftohtml 2.7.5 with applied rtftoweb 1.6 patches, with the command
 
\par \pard 
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 \tab rtftohtml -h1 -c -x guide.rtf
\par \pard\plain \f4\lang1031 {\i 
\par }The rtftoweb-patch adds the following features{\pard\plain \v\f4\lang1031 {\xe {Features of rtftoweb}}} to rtftohtml:
\par \pard 
\par 
\par \pard\plain \s22\fi-280\li900\tx900 \f8\lang1031 \tab splitting of the document:\line rtftoweb uses the headlines to determine where to split (the splitting depth is adjustable by the user, see also section {\f4\cf6 Headings})
\par \pard \s22\fi-280\li900\tx900 \tab fully customizable navigation panels on top and bottom of each page (see sections {\f4\cf6 Headings} and {\f4\cf6 Navigation panel})
\par \pard \s22\fi-280\li900\tx900 \tab active {\f4\cf6 Cross references} to headings, mail addresses and URLs
\par \pard \s22\fi-280\li900\tx900 \tab automatic generation of an active table of contents
\par \pard \s22\fi-280\li900\tx900 \tab automatic generation of an active {\f4\cf6 Index}
\par \pard \s22\fi-280\li900\tx900 \tab support for a few of Netscape\rquote s HTML extension, such as the {\f11 <center>}{\f4  tag and background images (see also section }{\f4\cf6 Navigation panel}{\f4 )
\par }\pard \s22\fi-280\li900\tx900 {\f4 \tab and of course: this }{\v\f4\uldb #Guide}{\f4\uldb Guide To Using rtftohtml and rtftoweb}
\par \pard\plain \f4\lang1031 
\par \pard For information about where to get and how to install rtftoweb, see section {\cf6 Installing rtftohtml and rtftoweb}.
\par \pard\plain \s15\sb120\brdrb\brdrth\brdrw15 \f8\lang1031 
\par \pard\plain \f4\lang1031 
\par {\v\fs28\super feat1.6}{\b New in version 1.6}{\pard\plain \v\f4\lang1031 {\xe {}{\b rtftoweb version 1.6}{}}}{\b 
\par }\pard 
\par \pard When I released rtftoweb 1.5, I thought it would be the last version of rtftoweb since I agreed with Chris Hector, the author of the orig
inal rtftohtml, that rtftoweb should be integrated into rtftohtml.  That was at the end of 1994, but no new version of rtftohtml was released since then.
\par \pard 
\par \pard 
Chris told me that he has currently (and during the last monts) too many other things to do, and that he will not be able to continue the development of rtftohtml within the next few months. Because of this, and because I keep getting bug reports and sugg
estions from rtftoweb users I decided to release another (intermediate) version of rtftoweb.
\par \pard 
\par \pard Among the new features{\pard\plain \v\f4\lang1031 {\xe {Features, new}}} are:
\par \pard 
\par \pard\plain \s22\fi-280\li900\tx900 \f8\lang1031 \tab rtftoweb now creates clean HTML (no more {\i \ldblquote Bad HTML\rdblquote } complaints by Arena!)
\par \pard \s22\fi-280\li900\tx900 \tab the {\f11 <center>}-tag of Netscape is supported
\par \pard \s22\fi-280\li900\tx900 \tab the layout of the {\f4\cf6 Navigation panel} now is fully customizable
\par \pard \s22\fi-280\li900\tx900 \tab Netscape users can specify additional layout features
\par \tab empty headings are ignored now
\par \pard \s22\fi-280\li900\tx900 \tab If email addresses and URIs are colored red in the RTF file, an HTML hyperlink will automatically be generated.
\par \pard \s22\fi-280\li900\tx900 \tab And of course: {\v\f4\uldb #Guide}{\f4\uldb This guide} that you are reading right now.
\par \pard\plain \f4\lang1031 
\par \pard This version also fixes some bugs of earlier versions, with the more important being:
\par 
\par \pard\plain \s22\fi-280\li900\tx900 \f8\lang1031 \tab If a heading is longer then a certain amount of characters, which can happen if an image has been formatted by mistake with a heading paragraph style, it is ignored.
\par \pard \s22\fi-280\li900\tx900 \tab Auto-numbered headings are now fully supported.
\par \tab Internal {\cf6 Cross references} are now correctly resolved across file boundaries.
\par \pard\plain \f4\lang1031 
\par For a detailed description of all changes have a look at the file {\v\uldb CHANGES}{\uldb CHANGES}.
\par \pard 
\par \pard\plain \s1\sb240\sa60\keepn \b\f5\fs48\lang1031\kerning28 Supported platforms{\pard\plain \s1\sb240\sa60\keepn \b\v\f5\fs48\lang1031\kerning28 {\xe {Supported platforms}}}
\par \pard\plain \f4\lang1031 
\par {\v\uldb #rtftohtml}{\uldb rtftohtml} is available for UNIX, Macintosh and PC systems. Binaries{\pard\plain \v\f4\lang1031 {\xe {Binaries}}} can be copied directly from Chris\rquote 
 ftp directory at Cray, but note that these binaries were not extended by rtftoweb.
\par 
\par  {\v\uldb #rtftoweb}{\uldb rtftoweb}
 is currently only available for UNIX, but you are more then welcome to try and port it to Macs or PCs. This should not be too hard, since rtftoweb does not use any UNIX-specific features, maybe apart from filenames longer then ridiculous 11 characters (c
oncerning a port to PCs).
\par 
\par \pard For directions on getting and installing rtftohtml and rtftoweb on UNIX systems, read the next section: {\cf6 Installing rtftohtml and rtftoweb}.
\par \pard\plain \s1\sb240\sa60\keepn \b\f5\fs48\lang1031\kerning28 Installing rtftohtml and rtftoweb
\par \pard\plain \f4\lang1031 
\par This section describes the installation of rtftohtml and rtftoweb under UNIX. If you are running a different system, have a look at section {\cf6 Supported platforms}.
\par 
\par Installing rtftohtml{\pard\plain \v\f4\lang1031 {\xe {Installation}}} and extending it with rtftoweb is really simple. Just follow these steps:
\par \pard 
\par \pard\plain \s19\fi-540\li900\tx900 \f8\lang1031 1.\tab Get {\v\f4\uldb http://sun1.rrzn-user.uni-hannover.de/}{\v\f4\uldb\lang1033 ~}{\v\f4\uldb zzhibol/rtftoweb/rtftohtml-2.7.5.tar.gz}{\f4\uldb rtftohtml version 2.7.5}.{\f4\cf1 
\par }2.\tab Unpack it with "{\f11 gzip -cd rtftohtml-2.7.5.tar.gz | tar xvpf -}".\line If your shell complains that it cannot find {\lang1033 \ldblquote }gzip\rdblquote  you should get and install {\v\f4\uldb ftp://ftp.rrzn.uni-hannover.de/pub/gnu/}{\f4\uldb 
this GNU utility} now.
\par 3.\tab Get {\v\f4\uldb http://sun1.rrzn-user.uni-hannover.de/}{\v\f4\uldb\lang1033 ~}{\v\f4\uldb zzhibol/rtftoweb/rtftoweb-1.6.tar.gz}{\f4\uldb rtftoweb version 1.6}.
\par 4.\tab Move {\f11 rtftoweb-1.6.tar.gz} into the directory {\f11 rtftohtml-2.7.5} which has been created by step 2, "{\f11 cd}" to it, and unpack it by "{\f11 gzip -cd rtftoweb-1.6.tar.gz | tar xvpf -}".
\par 5.\tab Patch the original rtftohtml-sources by issuing the command "{\f11 patch -l <patch.rtftoweb-1.6}". If your shell complains about not finding \ldblquote patch\rdblquote , you can get it {\v\f4\uldb ftp://ftp.rrzn.uni-hannover.de/pub/gnu/}{\f4\uldb 
here}.
\par \pard \s19\fi-540\li900\tx900 6.\tab Edit {\f11 makefile.rtftoweb} to specify the installation paths and compiler options:
\par \pard\plain \s23\fi-280\li1440\tx1440\tx4395 \f8\lang1031 \tab Set {\f11 BINDIR} to the directory where you would like the patched rtftohtml binary to be installed in.
\par \pard \s23\fi-280\li1440\tx1440 \tab Set {\f11 LIBDIR} to the directory where you would like rtftohtml\rquote s library files to be installed in.
\par \tab Set the compiler flag {\f11 DEFLANG} to the language{\pard\plain \s23\fi-280\li1440\tx1440 \v\f8\lang1031 {\xe {language}}}
 which most of your documents use. Currently rtftoweb supports english, french, spanish and german. rtftoweb will use the selected language if the RTF-file contains no language specification and no navigation panel customization file has been specified in
 the command line.
\par \pard\plain \s19\fi-540\li900\tx900 \f8\lang1031 7.\tab Type "{\f11 make -f makefile.rtftoweb}". (Note that you can still easily make an unpatched rtftohtml, see instructions in {\f11 makefile.rtftoweb}.)
\par \pard \s19\fi-540\li900\tx900 8.\tab Type "{\f11 make -f makefile.rtftoweb install}" to install your new, patched and full featured rtftohtml. 
\par \pard\plain \f4\lang1031 
\par {\b\i That's it!}{\i 
\par }
\par \pard 
\par \pard\plain \s1\sb240\sa60\keepn \b\f5\fs48\lang1031\kerning28 Command line options
\par \pard\plain \f4\lang1031 
\par rtftohtml is invoked by a command like this:
\par \pard 
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 \tab rtftohtml [options] file
\par \pard\plain \f4\lang1031 
\par {\f11 file} is the name of the RTF-file to convert. By default the HTML-output will be written to a file with the same basename, but with the {\f11 .rtf}-extension replaced with {\f11 .html}.
\par 
\par The most common options are (see below for more detailed descriptions of these):
\par \pard 
\par \pard\plain \s25\fi-3960\li4320\tx4320 \f8\lang1031 {\f11 -h}{\i\f11 level}\tab to split the document at headings of level {\i level},
\par {\f11 -c}\tab to create a table of contents, and
\par {\f11 -x}\tab to create an index (of course, this requires index entries to be in the RTF document)
\par \pard\plain \f4\lang1031 
\par These should suffice in most cases. When invoking rtftohtml without any arguments, a list of all available options is printed. Following is a complete and detailed list of all available command line options{\pard\plain \v\f4\lang1031 {\xe {
command line options}}}, sorted alphabetically:
\par \pard 
\par \pard\plain \s25\fi-3960\li4320\tx4320 \f8\lang1031 {\f11 -c}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f11\lang1031 {\xe {\f11 -c}}}\tab Generate a table of contents{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {Table of contents, creation}
}} on a separate page (the title page itself normally only contains the level-1-headings).
\par {\f11 -G}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f11\lang1031 {\xe {\f11 -G}}} \tab I
ndicates that no graphics files should be written. The hypertext links to the graphics files will still be generated. This is a performance feature for when you are re-translating a document and the graphics have not changed. 
\par {\f11 -h}{\i\f11 level}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f11\lang1031 {\xe {\f11 -h}}} \tab This tells rtftohtml to split the generated HTML document at all headings of level {\i level}
, thus creating a separate HTML file for the contents of every section at that level. If {\i level} is 0, only one HTML file will be created with a table of contents at the top of the HTML file. If {\i level}
 is omitted, rtftohtml will create a separate HTML file for every section.\line For example, {\f11 -h1}
 only splits the HTML-File when a level-1-heading is encountered.  All lower level headings will be internally referenced from the top of the respective HTML-File.\line This option is also required for the {\f11 -c} and {\f11 -x} options.
\par {\f11 -i}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f11\lang1031 {\xe {\f11 -i}}} \tab Indicates that imbedded graphics{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {imbedding graphics}}}
 should be linked into the main document using an IMG tag. The default is to use an HREF style link. 
\par {\f11 -N }{\i\f11 file}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f11\lang1031 {\xe {\f11 -N}}}{\f4 \tab If the }{\f11 -h}{\f4 
 option has been given, this option allows you to tell rtftohtml that it should read the description for the navigation panels it produces from file }{\i\f4 file.}{\f4  Navigation panels are described in more detail in section }{\f4\cf6 Navigation panels}
{\f4\cf1 .}
\par {\f11 -o }{\i\f11 filename}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f11\lang1031 {\xe {\f11 -o}}}\tab Indicates that the basic output file name{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {output file name}}} should be {\i\f11 filename}
. If any other files are created (such as for graphics), the basename of the other files will be {\i\f11 filename} without ".rtf" if it is present in the name. 
\par {\f11 -P }{\i\f11 extension}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f11\lang1031 {\xe {\f11 -P}}}\tab Use {\i\f11 extension} as the extension for any links to graphics files. The default for this is "{\f11 gif}". 
\par {\f11 -s}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f11\lang1031 {\xe {\f11 -s}}}{\f4 \tab Use short filenames when splitting the HTML output. In this case the HTML-files are simply numbered. If this option is not present the file-
names contain the first eight characters of the first heading contained in the respective files.}
\par {\f11 -t}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f11\lang1031 {\xe {\f11 -t}}}\tab Place external references to headlines near the top of the page. (Default is that they occur at the and of the page.)
\par {\f11 -T }{\i\f11 title}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f11\lang1031 {\xe {\f11 -T}}}\tab Use {\i\f11 title} as the document title{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {Document title}}}
.  This overrides any title supplied within the RTF-file (see also section {\f4\cf6 Supplying a title}).{\strike\v \line }({\b Note}: Stock rtftohtml uses this switch to prevent the generation of a table of contents. Since this conf
licts with rtftoweb's ToC-handling anyway, I have redefined this command line switch.)
\par {\f11 -x}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f11\lang1031 {\xe {\f11 -x}}}\tab Generate an index{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {Index}}}
. This works by gathering all the index entries of the RTF-File and inserting an invisible anchor at that place.
\par {\f11 -X }{\i\f11 text}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {-X}}}{\f4 \tab By default, rtftohtml inserts index anchors without any text, thus producing \ldblquote empty anchors\rdblquote 
 which most Web browsers have no problems with. Unfortunately there is one prominent exception to this statement: NCSA Mosaic}{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {}{\f4 Mosaic}{}}}{\f4 . Mosaic requires an
chors to contain at least one non-blank character, otherwise they are not recognized. This option lets you use }{\i\f4 text}{\f4  as the text of such anchors when using Mosaic as your Web browser, e.g. \ldblquote }{\f11 -X &#183;}{\f4 \rdblquote .}
\par \pard\plain \f4\lang1031 
\par \pard\plain \s1\sb240\sa60\keepn \b\f5\fs48\lang1031\kerning28 Using rtftohtml and rtftoweb
\par \pard\plain \f4\lang1031 
\par (Whenever speaking of {\i rtftohtml} in the following I mean {\i rtftohtml extended by rtftoweb}.)
\par 
\par To convert a document from RTF (Rich Text Format) to HTML, rtftohtml requires the contents of the RTF-file to be formatted with a certain set of paragraph styles{\pard\plain \v\f4\lang1031 {\xe {paragraph styles}}}. Fo
r example, headings at level 1 must be formatted with the paragraph style \ldblquote heading 1\rdblquote  (which is the built-in default for headings anyway; german heading styles may be called \ldblquote \'dcberschrift xy\rdblquote 
, but they appear in the RTF file as \ldblquote heading xy\rdblquote , too), lists must be formatted with a paragraph style such as \ldblquote numered list\rdblquote 
 etc. The reason for this is that rtftohtml needs to know which paragraph styles it should map to which HTML tags. This mapping between styles and tags can be customized be editing the file {\f11 html-trans} in rtftohtml\rquote 
s library directory (see section {\cf6 html-trans}
 for more), to create a mapping from your own individual paragraph styles to HTML-tags. Although this is not as complicated as it might seem, I personally prefer to adjust my Word-documents to use only (or at least mostly) the paragraph styles recognized 
by rtftohtml by default. In this chapter I will stick to this strategy. See section \ldblquote {\cf6 Adding paragraph styles}\rdblquote  for a few words on how to customize rtftohtml to correctly interpret your own paragraph style.
\par 
\par To make the creation and preparation of Word documents that are to be converted to HTML as easy as possible, I have included a style file for Microsoft Word 6.0, called {\f11 rtftoweb.dot} into the rtftoweb-tar-file. Section \ldblquote {\cf6 
A .dot file for WinWord}\rdblquote  describes the usage of this file in more detail.
\par \pard 
\par \pard\plain \s2\sb240\sa60\keepn \b\f5\fs36\lang1031 Supplying a title
\par \pard\plain \f4\lang1031 To determine the HTML-Title{\pard\plain \v\f4\lang1031 {\xe {Document title}}} for the created HTML-Files (the text between the {\f11 <title>} and {\f11 </title>} tags), rtftohtml{\i  }looks for the {\f11 \\title}
-token inside the {\f11 \\info}-group of the RTF-File.  Thus you should give your RTF-Documents a short, descriptive title in the respective dialog box of your word processor (should be called something like "File information").
\par 
\par Another way to specify the document title is via the {\f11 -T} command line option. For example:
\par \pard 
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 \tab rtftohtml -T \ldblquote My work of art\rdblquote  art.rtf
\par \pard\plain \f4\lang1031 
\par Note that this title will also be automatically inserted by rtftohtml into the first created HTML-File as a level-1-heading.  That's why you should usually delete the very first heading from yo
ur RTF-Document (or at least assign a different paragraph format to that line) and use it as the document title.  The reason for this is to prevent {\i rtftoweb}
 from interpreting the headline of your RTF-Document as a level 1 heading, where it should split.
\par \pard 
\par \pard\plain \s2\sb240\sa60\keepn \b\f5\fs36\lang1031 Character styles
\par \pard\plain \f4\lang1031 
\par rtftohtml automatically recognizes and converts bold, italic and underlined text. If a certain range of text is written using a monospaced font such as Courier, it also automatically creates monospaced HTML-output for that range. What font
s are considered to be monospaced can be configured in the file {\f11 html-trans} in section {\cf6 .TMatch} (\ldblquote monospace fonts -> tt\rdblquote ). By default the fonts \ldblquote Courier\rdblquote , \ldblquote Courier New\rdblquote  and 
\ldblquote Palatino\rdblquote  are expected to be monospaced.
\par 
\par If you get warning{\pard\plain \v\f4\lang1031 {\xe {warning\: no output translation}}} messages such as \ldblquote {\f11 no output translation for ...}\rdblquote 
 when running rtftohtml you can either replace that character with a less exotic one in your RTF-file or add a translation to the end of rtftohtml\rquote s library file {\f11 html-map}, such as \ldblquote {\i character translation\rdblquote .}
\par 
\par The newline{\pard\plain \v\f4\lang1031 {\xe {newline}}} character (created by Shift-Return) will be automatically\line converted to the corresponding HTML-tag,\line as\~will\~the\~unbreakable\~space{\pard\plain \v\f4\lang1031 {\xe {unbreakable\~space}}}\~
(created\~by\~Control-Shift-Space).
\par \pard 
\par \pard\plain \s2\sb240\sa60\keepn \b\f5\fs36\lang1031 Headings
\par \pard\plain \f4\lang1031 
\par Headings{\pard\plain \v\f4\lang1031 {\xe {Headings}}} must be formatted with a paragraph style like \ldblquote heading 1\rdblquote , \ldblquote heading 2\rdblquote  etc. (resp. \ldblquote \'dcberschrift 1\rdblquote 
 etc.) to be automatically recognized by rtftohtml. rtftohtml uses these styles to determine when it should split the HTML-file. The heading level at which splitting should take place can be configured by the command line switch {\f11 -h}{\i\f11 level}
 (see section {\cf6 Command line options}). If a heading contains no text (i.e. it is empty) it will be ignored by rtftohtml.
\par 
\par If the {\f11 -h} switch was present when rtftohtml was invoked, a navigation panel{\pard\plain \v\f4\lang1031 {\xe {navigation panel}}}
 will be inserted at the top and at the bottom of every generated HTML file. This navigation panel will contain the following elements:
\par \pard 
\par \pard\plain \s22\fi-280\li900\tx900 \f8\lang1031 \tab Previous, if there is a previous section at the same heading level,
\par \tab Next, if there is a next section at the same heading level,
\par \tab Up, if the current section is not at level 1,
\par \tab Title, to go to the title document,
\par \tab Contents, if a table of contents has been generated, i.e. the {\f11 -c} switch had been given to rtftohtml
\par \pard \s22\fi-280\li900\tx900 \tab Index, if an index has been generated, i.e. the {\f11 -x} switch had been given to rtftohtml
\par \pard\plain \f4\lang1031 
\par \pard rtftohtml will try to use the language of the RTF-file for labelling the navigation panel. Currently there is support for english, spanish, french and german. However, if you
 would like a more fancy-looking panel, with buttons etc., you can tell rtftohtml (by writing a simple configuration file) what HTML-code it should use for the individual panel elements. The creation of such configuration files is described in detail in s
ection {\cf6 Navigation panels}. 
\par \pard\plain \s2\sb240\sa60\keepn \b\f5\fs36\lang1031 Lists{\pard\plain \s2\sb240\sa60\keepn \b\v\f5\fs36\lang1031 {\xe {Lists}}}
\par \pard\plain \f4\lang1031 
\par rtftohtml knows about the following lists (in braces is the name of the respective paragraph style it expects such lists to be formatted with):
\par \pard 
\par \pard\plain \s25\fi-3960\li4320\tx4320 \f8\lang1031 numbered{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {numbered lists}}} (\ldblquote numbered list\rdblquote )\tab items start wi
th a tab and end with a paragraph mark (numbers before the tab are ignored)
\par unnumbered{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {unnumbered lists}}} (\ldblquote bullet list\rdblquote )\tab items start with a tab and end with a paragraph mark (bullets etc. before the tab are ignored)
\par Glossaries{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {Glossaries}}} (\ldblquote glossary\rdblquote )\tab term and definition are separated by a tab, glossary entries are separated by a paragraph mark
\par \pard\plain \f4\lang1031 
\par Nested lists{\pard\plain \v\f4\lang1031 {\xe {Nested lists}}} can be created from an RTF document by using a different style for each level of indentation. The styles "bullet list 1" "numbered list 2" ... represent different levels of nesting, with 
\ldblquote bullet list 1\rdblquote  being at nesting level 1. The only rule for use is that no levels of nesting are skipped. For example, a "numbered list 3" paragraph must not appear immediately after a
 "Normal" paragraph. It must follow a paragraph with a nesting level of 2 or higher.
\par 
\par An example sequence of paragraph styles to produce a nested list might look like this:
\par \pard 
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 numbered list
\par \tab bullet list 1
\par \tab \tab bullet list 2
\par \tab \tab glossary 2
\par \tab bullet list 1
\par \pard \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \tab \tab numbered list 2
\par \pard\plain \f4\lang1031 
\par \pard 
\par \pard\plain \s2\sb240\sa60\keepn \b\f5\fs36\lang1031 Tables{\pard\plain \s2\sb240\sa60\keepn \b\v\f5\fs36\lang1031 {\xe {Tables}}}
\par \pard\plain \f4\lang1031 
\par {\*\bkmkstart tables}{\*\bkmkend tables}
rtftohtml is able automatically convert tables to HTML by generating a range of preformatted text to keep the cells in their place. For this reason only plain text is allowed in tables. Bold and italic text in tables should be possible in the next release
 of the rtftoweb patches. Tables produced/converted by rtftohtml look something like this:
\par \pard 
\par \trowd \trgaph70\trleft-70 \cellx3000\cellx6070\cellx9140 \pard \intbl Column 1, Row 1\cell \pard \intbl Column 2, Row 1\cell Column 3, Row 1\cell \pard \intbl \row \trowd \trgaph70\trleft-70 \cellx3000\cellx6070\cellx9140 \pard \intbl Column 1, Row 2
\cell \pard \intbl Column 2, Row 2\cell \pard \intbl Column 3, Row 2\cell \pard \intbl \row \trowd \trgaph70\trleft-70 \cellx3000\cellx6070\cellx9140 \pard \intbl Column 1, Row 3\cell \pard \intbl Column 2, Row 3\cell Column 3, Row 3\cell \pard \intbl 
\row \pard 
\par 
\par \pard If sometimes I have really got a lot of time on my hands I am planning to add support for tables as realized by the upcoming HTML 3.0 specification. Of course this would require you to use a HTML 3.0 capable browser such as Arena or Netscape. 

\par \pard\plain \s2\sb240\sa60\keepn \b\f5\fs36\lang1031 Images{\pard\plain \s2\sb240\sa60\keepn \b\v\f5\fs36\lang1031 {\xe {Images}}}
\par \pard\plain \f4\lang1031 Graphics{\pard\plain \v\f4\lang1031 {\xe {Graphics}}}
 are imbedded in RTF in either a binary format or an (ASCII) hex dump of that binary. I have never seen a binary format graphic  - I don't think that the filter will process binary correctly. It does hand
le the hex format of graphics, by converting the hex back into binary and writing the binary to a file. The file extension is chosen by looking at the original type of the graphic. The following list shows the file types and their extensions:
\par \pard 
\par \pard\plain \s25\fi-3960\li4320\tx4320 \f8\lang1031 Macintosh PICT{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {PICT}}} \tab .pict  - also, 256 bytes of nulls are prepended to the graphic. This is to conform to the PICT file format.
\par Windows Meta-files{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {WMF}}}\tab .wmf
\par Windows Bit-map{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {BMP}}}\tab .bmp
\par \pard\plain \f4\lang1031 
\par In addition, the filter produces a link to the file containing the graphic. Now, since the above graphic formats are not very portable, the filter assumes that you will convert these files to something more useful, like GIF. So the format of the link is:

\par {\f3 <a href="basenameN.ext">Click here for a Picture</a>
\par }\pard where 
\par \pard\plain \s22\fi-280\li900\tx900 \f8\lang1031 \bullet \tab {\f3 basename} is the name of the input document (without the .rtf extension)
\par \bullet \tab {\f3 N} is a unique number (starting at 1)
\par \pard \s22\fi-280\li900\tx900 \bullet \tab {\f3 ext} is an extension. This defaults to GIF, but can be overidden with the -P command line option.
\par \pard\plain \f4\lang1031 
\par {\pard\plain \v\f4\lang1031 {\xe {WMF, conversion}}}{\i Since most Web browser only support images in GIF-format, you will have to convert the generated PICT- and WMF-files to GIF. For PICT there is picttoppm/ppmtogif, but for WMF? I don\rquote 
t know of any WMF translators for Unix; for DOS there is wmf2bmp, whose output could then be c
onverted to GIF via the pbmplus-tools. From what I understand, WMF is not a pixel- but a vector-graphic format, so maybe it would be easier to translate WMF to Postscript and then let Ghostscript do the job of converting to GIF. Any volunteers for writing
 a wmftops utility?
\par }
\par You can also change the link to an IMG form{\pard\plain \v\f4\lang1031 {\xe {inline images}}}. If you specify the -I command line option, all links to graphics will be of the form:
\par {\f3 <IMG src="basenameN.ext">}
\par 
\par \pard There is one other special case. If a graphic is encountered when the filter is in the process of generating a link, the IMG form of the link is used even without the -I command line option.
\par \pard\plain \s2\sb240\sa60\keepn \b\f5\fs36\lang1031 Cross references
\par \pard\plain \f4\lang1031 All kinds of cross references{\pard\plain \v\f4\lang1031 {\xe {cross references}}} can be created from within the RTF-file. The reference itself must be formatted with the attributes \ldblquote double-underline/hidden\rdblquote 
 and must follow the standard HTML-conventions, such as \ldblquote http://www.w3.org\rdblquote  or \ldblquote file.txt\rdblquote  or \ldblquote #mark1\rdblquote . The \ldblquote hot\rdblquote  text, that is the text that will appear \ldblquote clickable
\rdblquote  in your Web-browser, immediately follows the reference and must be double-underlined, but not hidden.
\par 
\par Anchors for internal cross references{\pard\plain \v\f4\lang1031 {\xe {cross references, internal}}} (such as \ldblquote mark1\rdblquote , corresponding to the example above) must be formatted either with the attributes \ldblquote hidden/outline
\rdblquote  or \ldblquote hidden/superscript\rdblquote . For example {\v\uldb #feat1.6}{\uldb this link} will bring you to the list of new features in rtftoweb 1.6.
\par 
\par If you just want to create a reference to a certain heading{\pard\plain \v\f4\lang1031 {\xe {references to headings}}} resp. section, it is sufficient to simply format the reference with the color red (when using {\f11 rtftoweb.dot}
: mark the reference and press Control-Shift-r). The text of the reference must match the beginning {\i n} characters of the heading, so the references \ldblquote {\cf6 Supplying}\rdblquote  and \ldblquote {\cf6 Supplying a title}\rdblquote 
 point to the same section.
\par 
\par If an email address{\pard\plain \v\f4\lang1031 {\xe {email addresses}}} such as {\cf6 bolik@irb.uni-hannover.de} is colored red, rtftohtml will automatically produce a cross reference of type \ldblquote mailto\rdblquote 
. Not all Web browser support this type of references (Netscape does).
\par 
\par The same work for all other kinds of URL{\pard\plain \v\f4\lang1031 {\xe {URL-references}}}s, so if the URL {\cf6 ftp://ftp.rrzn.uni-hannover.de/pub/} is colored red, rtftohtml will automatically produce a reference pointing to that URL.
\par \pard 
\par \pard\plain \s2\sb240\sa60\keepn \b\f5\fs36\lang1031 Index entries and footnotes
\par \pard\plain \f4\lang1031 If your RTF document contains footnotes{\pard\plain \v\f4\lang1031 {\xe {footnotes}}} or endnotes{\pard\plain \v\f4\lang1031 {\xe {endnotes}}}
, the filter will place the text of the footnote in a separate HTML document.  At the footnote reference mark, the filter will generate a hypertext link to the text of the footnote. This works with either automatically numbered footnotes{\fs18\up6 \chftn 
{\footnote \pard\plain \s44 \f4\fs20\lang1024 {\fs18\up6 \chftn }\tab Look, there is one now!}}, or user supplied footnote reference marks{\fs18\up6 +{\footnote \pard\plain \s44 \f4\fs20\lang1024 {\fs18\up6 +} \tab There is my mark.}} 
\par 
\par If you insert index entries{\pard\plain \v\f4\lang1031 {\xe {index entries}}} into your RTF-document and give rtftohtml the {\f11 -x}-option, rtftohtml will generate a hypertext\rquote ish index
 for the generated HTML-documents. Note that when using NCSA-Mosaic{\pard\plain \v\f4\lang1031 {\xe {Mosaic}}} as your Web browser you should also tell rtftohtml to insert some text into the generated anchors by using the command line switch {\f11 -X }{
\i\f11 text} (see section {\cf6 Command line options}).
\par \pard\plain \s2\sb240\sa60\keepn \b\f5\fs36\lang1031 Other features
\par \pard\plain \s3\sb240\sa60\keepn \b\f5\fs28\lang1031 Horizontal lines{\pard\plain \s3\sb240\sa60\keepn \b\v\f5\fs28\lang1031 {\xe {Horizontal lines}}}
\par \pard\plain \f4\lang1031 The paragraph style \ldblquote hr\rdblquote  can be used to produce a horizontal line in the HTML output (this will be translated to the {\f11 <hr>} tag).
\par \pard\plain \s3\sb240\sa60\keepn \b\f5\fs28\lang1031 Discarding Unwanted Text{\pard\plain \s3\sb240\sa60\keepn \b\v\f5\fs28\lang1031 {\xe {Discarding Unwanted Text}}}
\par \pard\plain \f4\lang1031 If you have text that you do not want to appear in the HTML output, simply format the text as Hidden and Plain (that is, no underline, outline...)
\par 
\par \pard If you wish to modify the formatting that discards text, you need to change the entry in {\cf6 html-trans} that specifies "_Discard".{\b 
\par }\pard\plain \s3\sb240\sa60\keepn \b\f5\fs28\lang1031 Imbedding HTML{\pard\plain \s3\sb240\sa60\keepn \b\v\f5\fs28\lang1031 {\xe {Imbedding HTML}}} in a Document
\par \pard\plain \f4\lang1031 Normally, if your RTF document contained the text "<cite>hello</cite>", the translator would output this as: "&lt;cite&gt;hello&lt;/cite&gt;". This ensures that the text would appear in your HTML 
output exactly as it appeared in the original RTF document. If, however, you want the <cite></cite> to be interpreted as HTML markup, you must format the tags using Hidden and Shadow or Hidden and Strikethrough. The filter will then send the tags through 
without translation.  It is also possible to use the paragraph style \ldblquote HTML\rdblquote  to let rtftohtml interpret a whole paragraph as being literal HTML.
\par 
\par When the rtftohtml filter produces HTML markup, it keeps track of the nesting level of tags to ensure that you d
on't get something like <b><cite>hello</b></cite> which would be incorrect markup. If you imbed HTML markup in your document, the filter will NOT be aware of it. You must ensure that your markup appears correctly nested.
\par 
\par If you wish to modify the formatting for imbedded HTML, you need to change the entry in {\cf6 html-trans} that specifies "_Literal".
\par \pard 
\par \pard\plain \s3\sb240\sa60\keepn \b\f5\fs28\lang1031 Other paragraph styles
\par \pard\plain \f4\lang1031 rtftohtml understands a few other paragraph styles by default. These are (among others):
\par \pard 
\par \pard\plain \s25\fi-3960\li4320\tx4320 \f8\lang1031 address{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {address}}}\tab Will be converted to HTML\rquote s {\f11 <address>}-environment.
\par blockquote{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {blockquote}}}\tab Will be converted to HTML\rquote s {\f11 <blockquote>}-environment.
\par pre{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {pre}}}\tab Will be converted to HTML\rquote s {\f11 <pre>}-environment. This is useful when spacing is important in a paragraph.
\par \pard\plain \f4\lang1031 {\b 
\par }\pard\plain \s2\sb240\sa60\keepn \b\f5\fs36\lang1031 A .dot file{\pard\plain \s2\sb240\sa60\keepn \b\v\f5\fs36\lang1031 {\xe {dot file}}} for WinWord
\par \pard\plain \f4\lang1031 While using rtftohtml myself I have created a style fil{\pard\plain \v\f4\lang1031 {\xe {style file}}}e for Microsoft Word 6.0 called {\f11 rtftoweb.dot}
 (I have also a less sophisticated dot-file for Word 2.0 lying around somewhere, mail me ({\cf6 zzhibol@rrzn-user.uni-hannover.de}
) if you are interested). By using this file as the standard document type for your documents it gets really easy to create RTF-documents which can be translated by rtftohtml without any problems. You make your documents use {\f11 rtftoweb.dot }
by following the same procedure as usual when assigning dot-files. In german Word 6.0 this is (sorry, currently there are no english instructions available):
\par \pard 
\par \pard\plain \s22\fi-280\li900\tx900 \f8\lang1031 \tab Men\'fcpunkt \ldblquote Datei/Dokumentvorlage...\rdblquote  aufrufen
\par \tab Unter \ldblquote Dokumentvorlage/Verbinden...\rdblquote  {\f11 rtftoweb.dot} ausw\'e4hlen und \ldblquote Formatvorlagen automatisch aktualisieren\rdblquote  anw\'e4hlen
\par \tab Unter \ldblquote Globale Vorlagen und Add-Ins\rdblquote  ebenfalls {\f11 rtftoweb.dot} ausw\'e4hlen und aktivieren
\par \pard \s22\fi-280\li900\tx900 \tab Mit \ldblquote OK\rdblquote  Dialog beenden.
\par \pard\plain \f4\lang1031 
\par {\f11 rtftoweb.dot }adds all the paragraph styles which are understood by rtftohtml (without modifying {\cf6 html-trans}{\cf1 ) to your document. Additionally some keyboard shortcuts}{\pard\plain \v\f4\lang1031 {\xe {}{\cf1 keyboard shortcuts}{}}}{\cf1 
 are now defined (or possibly redefined...):
\par }\pard {\cf1 
\par }\pard\plain \s25\fi-3960\li4320\tx4320 \f8\lang1031 Ctrl-Shift-1 ... Ctrl-Shift-6\tab Selects paragraph style \ldblquote heading 1\rdblquote  ... \rdblquote heading 6\rdblquote .
\par Ctrl-Shift -p\tab Selects paragraph style \ldblquote pre\rdblquote .
\par Ctrl-Shift -b\tab Selects paragraph style \ldblquote bullet list\rdblquote .
\par Ctrl-Shift -n\tab Selects paragraph style \ldblquote numbered list\rdblquote .
\par Ctrl-Shift -g\tab Selects paragraph style \ldblquote glossary\rdblquote .
\par Ctrl-Shift -p\tab Selects paragraph style \ldblquote pre\rdblquote .
\par Ctrl-Shift -h\tab Formats the selected text for plain HTML.
\par Ctrl-Shift -r\tab Formats the selected text with the color red (for {\f4\cf6 Cross references}).
\par Ctrl-Shift -i\tab Formats the selected text to be the destination of a {\f4\cf6 Cross reference}.
\par Ctrl-Shift -u\tab Formats the selected text to be the \ldblquote hot text\rdblquote  of a {\f4\cf6 Cross reference}.
\par Ctrl-Shift -a\tab Formats the selected text to be the anchor of a {\f4\cf6 Cross reference}.
\par Ctrl-Shift -c\tab Formats the selected text to use font \ldblquote Courier New\rdblquote .
\par Ctrl-Shift -t\tab Formats the selected text to use font \ldblquote Times New Roman\rdblquote .
\par 
\par \pard \s25\fi-3960\li4320\tx4320 
\par \pard\plain \s1\sb240\sa60\keepn \b\f5\fs48\lang1031\kerning28 Customizations
\par \pard\plain \s2\sb240\sa60\keepn \b\f5\fs36\lang1031 Adding paragraph styles{\pard\plain \s2\sb240\sa60\keepn \b\v\f5\fs36\lang1031 {\xe {paragraph styles, adding}}}
\par \pard\plain \f4\lang1031 When converting existing documents to rtftohtml you often get a lot of warning message telling you that some paragraph styles are unknown. Now you can either
\par \pard 
\par \pard\plain \s22\fi-280\li900\tx900 \f8\lang1031 \tab despair (don\rquote t do this, there\rquote s no need to),
\par \tab ignore the messages: this may work when only the text of the paragraph is of interest, since rtftohtml assumes the \ldblquote Standard\rdblquote  paragraph style when encountering one it does not know,
\par \tab adjust the RTF document to use only paragraph styles which rtftohtml understands by default (these are listed in the file {\f4\cf6 html-trans} in section {\f4\cf6 .PMatch}),
\par \pard \s22\fi-280\li900\tx900 \tab add your own paragraph style to rtftohtml\rquote s library file html-trans.
\par \pard\plain \f4\lang1031 {\*\bkmkstart ht}{\*\bkmkend ht}
\par To add a new paragraph style, simply go to the {\cf6 .PMatch} table contained in the file html-trans and add an entry to the end. Put the name of the paragraph style (quoted), the nesting level (usually zero) and the name of the {\cf6 .PTag}
 entry that should be used. 
\par \pard 
\par \pard\plain \s3\sb240\sa60\keepn \b\f5\fs28\lang1031 html-trans File Format
\par \pard\plain \f4\lang1031 
\par The file {\f11 html-trans}{\pard\plain \v\f4\lang1031 {\xe {}{\f11 html-trans}{}}} is needed by rtftohtml to map character and paragraph styles contained in the RTF-file to corresponding HTML-tags. It must be readable either from rtftohtml\rquote 
s library directory (as set in the file {\f11 makefile.rtftoweb}) or from the directory contained in the environment variable{\pard\plain \v\f4\lang1031 {\xe {environment variable}}} {\f11 RTFLIBDIR}.
\par 
\par In html-trans there are four tables. They are labelled {\cf6 .PTag}, {\cf6 .TTag}, {\cf6 .TMatch} and {\cf6 .PMatch}
. These tables begin with the name (in column one) and continue until the next table starts. All blank lines and lines beginning with a '#' are discarded. '#' lines are typically used for comments. The tables themselves are composed of records containing 
a fixed number of fields which are separated by commas. The fields are either strings (which should be quoted) integers or bitmasks.
\par \pard 
\par \pard\plain \s4\sb240\sa60\keepn \b\f5\lang1031 .PTag Table
\par \pard\plain \f4\lang1031 Each entry in the .PTag table describes an HTML paragraph markup. The format is: 
\par .PTag
\par \pard #"name","starttag","endtag","col2mark","tabmark","parmark",allowtext,cannest,DeleteCol1,fold,TocStyl
\par \pard\plain \s25\fi-3960\li4320\tx4320 \f8\lang1031 {\b name}\tab A unique name for this entry. These names are referenced in the .PMatch table.
\par {\b starttag}\tab This string will be output once at the beginning of any text for this markup.
\par {\b endtag}\tab This string will be output once at the end of any text for this markup.
\par {\b col2mark}\tab This string will be output  in place of the first tab in every paragraph (used for lists)
\par {\b parmark}\tab This string will be output in place of each paragraph mark. (usually <br> or <p>)
\par {\b allowtext}\tab If 0, no text markup will be allowed within this markup. (for example <pre> or <h1> don't format well if they contain additional markup.
\par {\b cannest}\tab If 1, other paragraph markup will be allowed to nest within this markup. (used for nesting lists)
\par {\b DeleteCol1}\tab If 1, all text up to the first tab in a paragraph will be deleted. (used to strip out bullets that when going to unordered lists (<ul>).
\par {\b fold}\tab If 1, the filter will add newlines to the HTML to keep the number of characters in a line to less than 80. For <pre> or <listing> elements, this should be set to 0.
\par \pard \s25\fi-3960\li4320\tx4320 {\b TocStyl}\tab The TOC level. If greater than 0, the filter will create a Table of contents entry for every paragraph using this markup. 
\par \pard\plain \f4\lang1031 
\par 
\par \pard {\b Sample .PTag Entries
\par }\pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 "h1","<h1>\\n","</h1>\\n","\\t","\\t","<br>\\n",0,0,0,1
\par \pard\plain \f4\lang1031 This is a level 1 heading.  The "\\n" in the start and end-tag fields forcesa newline in the HTML markup. Since newlines are ignored in HTML
 (except in <pre>) it's only effect is to make the HTML output more readable. There is no difference between the first tab and any other. They both translate to a tab mark. Paragraph marks generate "<br>" followed by a newline (just for looks). Text marku
p (like <b>) is not allowed within <h1> text, because we leave that up to the HTML client. No nesting is allowed - (see the discussion on nested styles). No text is deleted. Every paragraph using this markup will also generate a level-1 table of contents 
entry.
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 
\par \pard \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 "Normal","","\\n","\\t","\\t","<p>\\n",1,0,0,0
\par \pard\plain \f4\lang1031 This is the default for normal text. Regular text in HTML has no required start and end-tags. The "\\
n" in the end-tag field forces a newline in the HTML markup. Since newlines are ignored in HTML (except in <pre>) it's only effect is to make the HTML outp
ut more readable. There is no difference between the first tab and any other. They both translate to a tab mark. Paragraph marks generate "<p>" followed by a newline (just for looks). Text markup (like <b>) i
s allowed within Normal text. No nesting is allowed - (see the discussion on nested styles). No text is deleted.
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 
\par \pard \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 "ul","<ul>\\n<li>","</ul>","\\t","\\t","\\n<li>",1,1,0,0
\par \pard\plain \f4\lang1031 This is the entry for unordered lists. This generates a "<ul>\\
n<li>" at the start of the list and "</ul>/n" at the end. There is no difference between the first tab and any other. They both translate to a tab mark. Paragraph marks generate "<li>" preceded
 by a newline (just for looks). Text markup (like <b>) is allowed, and this entry may be nested - and it allows others to be nested within it. This allows nested lists. No text is deleted.
\par \pard 
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 "ul-d","<ul>\\n<li>","</ul>","\\t","\\t","\\n<li>",1,1,1,0
\par \pard\plain \f4\lang1031 This entry is identical to the previous except that the DeleteCol1 field is set to 1. This is used to remove bullets (which really appear in the RTF) because we don't want to see them in the HTML.
\par \pard 
\par \pard\plain \s4\sb240\sa60\keepn \b\f5\lang1031 .TTag Table
\par \pard\plain \f4\lang1031 Each entry in the .TTag table describes an HTML text markup. The format is: 
\par .TTag
\par \pard "name","starttag","endtag"
\par \pard\plain \s25\fi-3960\li4320\tx4320 \f8\lang1031 {\b name}\tab A unique name for this entry. These names are referenced in the .PMatch table.
\par {\b starttag}\tab This string will be output once at the beginning of any text for this markup.
\par \pard \s25\fi-3960\li4320\tx4320 {\b endtag}\tab This string will be output once at the end of any text for this markup.
\par \pard\plain \f4\lang1031 
Note that unlike the .PTag table, no text markup should appear more than once. (Of course there is no good reason that it should appear.) If you have two entries with <b></b> start and end tags, it would be possible to get HTML of the form <b><b> text</b>
</b>. I don't know if this is invalid markup, but it sure is ugly.
\par \pard 
\par \pard\plain \s4\sb240\sa60\keepn \b\f5\lang1031 .TMatch Table
\par \pard\plain \f4\lang1031 Each entry in the .TMatch table describes processing for text styles. The format is: 
\par \pard .TMatch
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 "Font",FontSize,Match,Mask,"TextStyleName"
\par \pard\plain \s25\fi-3960\li4320\tx4320 \f8\lang1031 {\b Font}\tab The name of a Font, or "" if all fonts match this entry.
\par {\b FontSize}\tab The point-size of the font, or 0 if all point sizes match this entry.,
\par {\b Match}\tab A bit-mask, where each bit represents a text attribute. These bits are compared to the attributes of the style being output. They must match for this entry to be matched. One in a bit posit
ion means that the text style is set, a zero is not set.
\par {\b Mask}\tab 
A bit-mask, where each bit represents a text attribute. In comparing the style of the text being processed, to the Match bit-mask, this field is used to select the bits that matter. If a zero appears in a  bit-position, then that style attribute is ignor
ed (for the purpose of matching this entry.) Only 1 bits are used in the above comparision.
\par \pard \s25\fi-3960\li4320\tx4320 {\b TextStyleName}\tab This is either the name of an entry in the .TTag table indicating the HTML markup to use, or it is one of "_Discard", "_Name",  "_HRef", "_Hot", or "_Literal".
\par \pard\plain \f4\lang1031 
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 The order of bits in the Match and Mask bit-maps are:
\par #    v^bDWUHACSOTIB - Bold
\par #    v^bDWUHACSOTI - Italic
\par #    v^bDWUHACSOT - StrikeThrough
\par #    v^bDWUHACSO - Outline
\par #    v^bDWUHACS - Shadow
\par #    v^bDWUHAC - SmallCaps
\par #    v^bDWUHA - AllCaps
\par #    v^bDWUH - Hidden
\par #    v^bDWU - Underline
\par #    v^bDW - Word Underline
\par #    v^bD - Dotted Underline
\par #    v^b - Double Underline
\par #    v^ - SuperScript
\par \pard \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 #    v - SubScript
\par \pard\plain \f4\lang1031 
\par 
\par \pard {\b Sample .TMatch Entries
\par }\pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 # double-underline/not hidden -> hot text
\par # double-underline/hidden -> href
\par #    v^bDWUHACSOTIB,v^bDWUHACSOTIB
\par "",0,00100000000000,00100010000000,"_Hot"
\par \pard \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 "",0,00100010000000,00100010000000,"_HRef"
\par \pard\plain \f4\lang1031 
The first entry will match any text formatted with double underline EXCEPT if it is hidden text. This is accomplished by using those two bits to compare (the MASK field) and having a 1 in the double underline bit and a zero for the hidden text bit. The se
cond entry will match any text formatted with BOTH double u
nderline and hidden text. Any text that matches the first will be treated as the hot text of a link. Any text that matches the second will be taken as the href itself. (The filter requires that the HRef text immediately precede the Hot text.) 
\par \pard 
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 # Regular matches - You can have multiple of these active
\par # monospace fonts -> tt
\par \pard \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 "Courier",0,00000000000000,00000000000000,"tt"
\par \pard\plain \f4\lang1031 This will match any text that uses the Courier font and mark it using the HTML text markup appearing in the .TTag table with the entry name "tt".
\par \pard 
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 # bold -> bold
\par #    v^bDWUIACSOTIB,v^bDWUIACSOTIB
\par \pard \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 "",0,00000000000001,00000000000001,"b"
\par \pard\plain \f4\lang1031 
This will match any text that has bold attributes and will mark it using the HTML text markup appearing in the .TTag table with the entry name "b". Note that bold text using the Courier font would match both this entry and the previous. This will yeild ma
rkup of the form <b><tt>hi</tt><b>. Note that "b" is the name of an entry in the .TTag table, not the HTML markup that is used! 
\par \pard 
\par \pard\plain \s4\sb240\sa60\keepn \b\f5\lang1031 .PMatch Table
\par \pard\plain \f4\lang1031 Each entry in the .PMatch correlates a paragraph style{\pard\plain \v\f4\lang1031 {\xe {paragraph style, correlation}}} name to some entry in the .PTag table. The format is: 
\par .PMatch
\par \pard "Paragraph Style",nesting_level,"PTagName"
\par \pard\plain \s25\fi-3960\li4320\tx4320 \f8\lang1031 {\b Paragraph Style}\tab The paragraph style name that appears in the RTF input.
\par {\b nesting_level}\tab The nesting level. This should be zero except for nested list entries.
\par \pard \s25\fi-3960\li4320\tx4320 {\b PTagName}\tab The name of the .PTag entry that should be used for paragraphs with this paragraph style. 
\par \pard\plain \f4\lang1031 
\par 
\par \pard {\b Sample .PMatch Entries
\par }\pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 "heading 1",0,"h1"
\par \pard\plain \f4\lang1031 This is a level 1 heading.  Any paragraphs with this paragraph style will be mapped to the entry in the .PTag table named "h1".
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 
\par \pard \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 "numbered list",0,"ol-d"
\par \pard\plain \f4\lang1031 This is used for numbered lists.  Any paragraphs with this paragraph style will be mapped to the entry in the .PTag table named "ol-d". 
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 
\par \pard \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 "numbered list 2",2,"ol-d"
\par \pard\plain \f4\lang1031 This is an entry for a nested paragraph style. The nesting level of two is used to indicate that this paragraph should appear in the HTML nested within two levels of paragraph markups. The paragraph marked with this style
 may only appear after  a paragraph style that has a nesting level of 1 or greater.
\par \pard\plain \s16\ri-567\tx993\tx1985\tx2835\tx3828\tx4820\tx5812\tx6663\tx7655\tx8647 \f11\fs20\lang1031 
\par \pard\plain \f4\lang1031 
\par \pard\plain \s2\sb240\sa60\keepn \b\f5\fs36\lang1031 Navigation panels and Netscape support
\par \pard\plain \f4\lang1031 
\par If you want the navigation panels{\pard\plain \v\f4\lang1031 {\xe {navigation panels, spiffy}}} produced by rtftohtml (see section {\cf6 Headings}) to look more spiffy, e.g. with images as panel buttons{\pard\plain \v\f4\lang1031 {\xe {
images as panel buttons}}}, or if you want the generated HTML documents to use images as their background or another text color, this section is for you.
\par 
\par By using the {\f11 -N }{\cf6 Command line option} when invoking rtftohtml, it is possible to tell rtftohtml exactly how you want the created navigation panels to look like. The same configuration file can be used to add a few funny Netscapisms
{\pard\plain \v\f4\lang1031 {\xe {Netscapisms}}} to the generated documents. If no {\f11 -N}-option was given, but rtftohtml finds a file named {\f11 nav-panel} in its library directory or the directory contained in the environment variable {\f11 
RTFLIBDIR} it will use this file as the layout customization file. This way you can avoid having to add the {\f11 -N} command line options whenever you use rtftohtml.
\par 
\par An example for such a customization file is the file {\v\uldb nav-panel}{\uldb nav-panel}
, which has also been used when this guide was converted to HTML. By looking at this file you should easily see how the layout of your documents can be adjusted tou your taste.
\par 
\par Each line of such a customization file contains the definition of a layout element, as long as the first character is not the hash-character (#), which introduces comments. Everything that follows the first colon (:) in each line will be literal
ly inserted into the HTML-files when needed.
\par 
\par The following elements may be configured:
\par \pard 
\par \pard\plain \s25\fi-3960\li4320\tx4320 \f8\lang1031 previous\tab What to insert into the navigation panel when the \ldblquote previous\rdblquote  element is to be created.
\par next\tab The same for the \ldblquote next\rdblquote  element.
\par up\tab The same for the \ldblquote up\rdblquote  element.
\par title\tab The same for the \ldblquote title\rdblquote  element.
\par contents\tab The same for the \ldblquote contents\rdblquote  element.
\par index\tab The same for the \ldblquote index\rdblquote  element.
\par delimiter\tab What to use as the delimiter between the elements of navigation panels.
\par hr\tab What HTML-code to use when it\rquote s time to insert a horizontal line beneath or above navigation panels.
\par bgimage\tab Specifies an optional background (GIF-) image{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {background image}}} that should be used as the document background (requires Netsape).
\par bgcolor\tab Specifies an optional background color{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {background color}}} that should be used in the document background (requires Netsape). Syntax: {\f11 #rrggbb }{\f4 
(hexadecimal values for red, green, blue).
\par textcolor\tab }{\pard\plain \s25\fi-3960\li4320\tx4320 \v\f8\lang1031 {\xe {text color}}}{\f4 The color to use for normal text. Same synax as for bgcolor.}
\par \pard\plain \f4\lang1031 
\par \pard\plain \s1\sb240\sa60\keepn \b\f5\fs48\lang1031\kerning28 Plans
\par \pard\plain \f4\lang1031 
\par I currently do not know what Chris Hector\rquote s plans concerning rtftohtml are (he hasn\rquote t answered yet), but I plan to do some of the following as soon as time allows:
\par \pard 
\par \pard\plain \s22\fi-280\li900\tx900 \f8\lang1031 \tab Allow bold and italic text in tables.
\par \tab If there has been an {\f11 address} defined it should be inserted at the bottom of {\i every} generated HTML-file.
\par \tab Add support for HTML-3.0-style tables.
\par \tab Port the rtftoweb patches to PCs and Macs ({\b Help!})
\par \tab Let rtftohtml internally convert PICT and WMF files to GIF. This will probably not be possible within the next few months. ({\b Help!})
\par \pard \s22\fi-280\li900\tx900 \tab ...
\par \pard\plain \f4\lang1031 
\par If you can help me with any of the items in this lists, {\i please} contact me ({\cf6 zzhibol@rrzn-user.uni-hannover.de}
). And of course, if you happen to stumble over anything that might look like a bug or you have any ideas for future releases, contact me, too!
\par \pard 
\par }